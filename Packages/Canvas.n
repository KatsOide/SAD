(* Canvas 6/28/2023 *)

SetAttributes[{OutLine,Outline,UseBG,Permanent,Redraw},Constant];

AutoLoad[EyePoint,ListBirdsEyePlot,
  ListPlot3D,PackagesDirectory//"Canvas3D.n"];

AutoLoad[ChooseAxis,PackagesDirectory//"ChooseAxis.n"];
AutoLoad[CanvasCM,PackagesDirectory//"CanvasCM.n"];

CanvasFrame=Class[{},{},
  {PlotRange={Automatic,Automatic},
    PlotRegion={{0,1},{0,1}},
    Frame=True,
    FrameTicks={True,True,Ticks,Ticks},
    FrameLabel={"","","",""},
    GridLines={None,None},
    Scale={Linear,Linear},
    AspectRatio=GoldenRatio,
    Origin={0,0},
    $Scale={1,1},
    WindowScale={1,1},
    GraphicsList={},
    LegendList={},
    ID=0,
    FrameClick->True,
    InfoLabel->True},

  Constructor[]:=();

  SetScale[]:=();

  Show[]:=();

  Redraw[]:=();

  ];

CanvasGraphics=Class[{},

  {$DefaultWindowWidth=9.6,
    $DefaultWindowHeight=9.6/GoldenRatio,
    $DefaultWindowOrigin={2,1.8},
    $DefaultCanvasSize={13,10},
    $DefaultCanvasAspectRatio=13/10,
    EPS=1e-300,
    CanvasObject,
    TkAngle=Times@@(Tk$Version>={8,6}),RotSym=`Angle,
    LTfs=1.7,LTfmin=5},

  {DPI=72,
    Canvas$PlotRange={{0,1},{0,1}},
    Canvas$PlotRegion={{0,1},{0,1}},
    Canvas$Window=CanvasGraphics@$DefaultWindowOrigin+
      {{0,CanvasGraphics@$DefaultWindowWidth},
        {0,CanvasGraphics@$DefaultWindowWidth/GoldenRatio}},
    Canvas$RawWindow=CanvasGraphics@$DefaultWindowOrigin+
      {{0,CanvasGraphics@$DefaultWindowWidth},
        {0,CanvasGraphics@$DefaultWindowWidth/GoldenRatio}},
    RawWindowSize,
    WindowSize,
    StartID,
    CanvasLastID,
    CanvasLastID1,
    Canvas$IDList={},
    GraphicsList={},
    AllGraphics={},
    Canvas$Initialize=True,
    Canvas$Axes={Linear,Linear},
    Canvas$Origin=CanvasGraphics@$DefaultWindowOrigin,
    LegendList,
    LegendPos,
    LegendBG=Null,
    WindowList,
    TickListY={},
    Canvas$PlotLabel,
    DefaultOption={},
    EffectiveRange,
    EffectiveAxes,
    EffectiveGL,
    Canvas$Offset,
    Canvas$Scale,
    YOrg,XMax,Margin={{0.02,0.98},{0.02,0.98}},
    Canvas$Coord,
    Canvas$Coord1,
    Canvas$GCoord,
    CoordLimited,    
    CoordLimitedX,
    CoordLimitedY,
    StandardScale,
    PlotSymbolSize,
    WindowCoord,
    ToWindowCoord,
    Canvas$Range,
    RawWindowAspectRatio=GoldenRatio,
    WindowAspectRatio=GoldenRatio,
    XTRth=0.25,
    CanvasAspectRatio=13/10,
    Canvas$Frame,
    Canvas$FrameCallBack,
    WindowID,
    CCM=Null,
    DragZ,DragZ0,DragTag,DragDo,DragStart,DragMove,DragRelease,
    FirstBG="",
    BGItems={},
    Legends={},
    TickLabels={},
    FrameTag="F$0",
    lt=Null,
    ltsym=0,

    Canvas$Symbol,
    CanvasWidget,
    CanvasPathName,
    DefaultFont=$DefaultSansSerifFont,
    FontScale=1,
    TickFontScale=1,
    FrameFontScale=1,
    LegendFontScale=1,
    TitleFontScale=1,
    DefaultTitleSize=Switch[$FontSystem,
      "Xft",16,
      _,18],
    FSFontScale=Switch[$FontSystem,
      "Xft",1.7,
      _,2.2]
    },

  If[Order[{8,1},Tk$Version]>=0,
    Constructor[Widget[c_,__]]:=(
      CanvasWidget=c;
      CanvasPathName=TkPathName[c];
      With[{n$=CanvasPathName,
        p$=TkCanvasPointer[CanvasPathName],
        oval$=CanvasTypeID["oval"],
        poly$=CanvasTypeID["polygon"],
        line$=CanvasTypeID["line"],
        rect$=CanvasTypeID["rectangle"]},
        Canvas$Symbol[x__]:=(
          CanvasSymbolDirect[p$,x,Canvas$Range,
            If[Canvas$Axes[[2]]===Log,
              Canvas$Range[[2]],
              Canvas$Offset],
            oval$,poly$,rect$,line$]);
        CanvasLastID:=TkCanvasLastItem[p$]];
      RawWindowAspectRatio=StandardAspectRatio[];
      RotSym=If[TkAngle,`Angle,`Rotation,`Rotation];
      SetCanvas$Scale[Automatic];
      If[`$HaveLaTeX<=>"",lt=LaTeX[`style->"standalone",`pt->11,
        `tw->"24 cm",`pw->"25 cm",`margins->"'0 1 0 1'",`dpi->600]]
      ),

    Constructor[Widget[c_,__]]:=(
      DefaultFont=$DefaultFont[[1]];
      CanvasWidget=c;
      CanvasPathName=TkPathName[c];
      With[{n$=CanvasPathName},
        Canvas$Symbol[x__]:=Tcl[CanvasSymbol[n$,x,Canvas$Range]];
        CanvasLastID:=(
          CanvasLastID1=
            If[#==={},0,
              Max[First[#],CanvasLastID1]]&
              [CanvasWidget[Find$Below[Floor[2E9]]]])];
      RawWindowAspectRatio=StandardAspectRatio[];
      SetCanvas$Scale[Automatic];
      )

    ];

  StandardAspectRatio[]:=(
    CanvasAspectRatio=Divide@@CanvGeo[];
    Min[GoldenRatio*CanvasAspectRatio/$DefaultCanvasAspectRatio,
      GoldenRatio+CanvasAspectRatio-$DefaultCanvasAspectRatio]);

  CanvGeo[]:=(CanvGeo[]=Module[{{w,h}=WidgetInfo[CanvasWidget,{Width,Height}]},
    If[w<4,
      CanvasWidget[CGet[Width,Height]],
      {w,h}]]);

  Choose[]:=(
    Clear[The$Canvas];
    The$Canvas=CanvasWidget);

  SetCanvas$Scale[align_]:=(
    Module[{g=CanvGeo[],scale},
      DPI=Switch[align,
        Automatic,
        Floor[Min[g/$DefaultCanvasSize]],
!        Floor[g[[2]]/$DefaultCanvasSize[[2]]],
        Horizontal,
        Floor[g[[1]]/$DefaultCanvasSize[[1]]],
        Vertical,
        Floor[g[[2]]/$DefaultCanvasSize[[2]]]];
      {XMax,YOrg}=g/DPI;
      scale=g/(DPI*$DefaultCanvasSize);
      RawWindowSize=$DefaultWindowWidth*{1,1/RawWindowAspectRatio}*scale[[1]];
      Canvas$Origin=$DefaultWindowOrigin*scale;
      Canvas$RawWindow=Canvas$Origin+Thread[{{0,0},RawWindowSize}]];
    StandardScale=Sqrt[DPI/72];
    PlotSymbolSize=4*StandardScale;
    Canvas$Scale=DPI*{1,-1}*
      ((WindowSize=Apply[(#2-#1)&,Canvas$Window,{1}])/
        (Max[#,1e-100]&/@Abs[#1-#2])&@@Thread[Canvas$PlotRange]);
    Canvas$Offset=DPI*
      ({1,-1}*Canvas$Window[[,1]]+{0,YOrg})
    -Canvas$PlotRange[[,1]]*Canvas$Scale;
    SetupScaleFuns[];
    Canvas$Range={
      WindowCoord[{Canvas$Window[[1,1]],Canvas$Window[[2,2]]}],
      WindowCoord[{Canvas$Window[[1,2]],Canvas$Window[[2,1]]}]};
    );

  Set$Canvas$Offset[]:=Canvas$Offset;
  Set$Canvas$Offset[x_]:=(Canvas$Offset=x);
  Set$Canvas$Scale[]:=Canvas$Scale;
  Set$Canvas$Scale[y_]:=(Canvas$Scale=y);

  SetupScaleFuns[]:=(With[{Canvas$Offset,Canvas$Scale,DPI,Canvas$PlotRange,
    YOrg},
    Canvas$Coord1[x_]:=Round[Canvas$Offset+x*Canvas$Scale];
    WindowCoord[{x_,y_}]:=
      Round[{x,YOrg-y}*DPI];
    ToWindowCoord[{x_,y_}]:=
      {x/DPI, YOrg-y/DPI};
    Clear[Canvas$GCoord];
    Switch[Canvas$Axes,
      {Linear|Date,Linear|Date},
      Canvas$Coord[x_]:=Round[Canvas$Offset+x*Canvas$Scale];
      Canvas$GCoord[x_]:=x;
      CoordLimitedX[x_]:=
        Restrict[x,Canvas$PlotRange[[1,1]],Canvas$PlotRange[[1,2]]];
      CoordLimitedY[x_]:=
        Restrict[x,Canvas$PlotRange[[2,1]],Canvas$PlotRange[[2,2]]],

      {Linear|Date,Log},
      Canvas$Coord[x_]:=Round[Canvas$Offset+
        {First[x],
          Log[10,Restrict[Second[x],EPS,Infinity]]}*Canvas$Scale];
      Canvas$GCoord[{x_,y_}]:={x,10^y};
      CoordLimitedX[x_]:=
        Restrict[x,Canvas$PlotRange[[1,1]],Canvas$PlotRange[[1,2]]];
      CoordLimitedY[x_]:=
        Restrict[Log[10,Restrict[x,EPS,Infinity]],
          Canvas$PlotRange[[2,1]],Canvas$PlotRange[[2,2]]],

      {Log,Linear|Date},
      Canvas$Coord[x_]:=Round[Canvas$Offset+
        {Log[10,
          Restrict[First[x],EPS,Infinity]],Second[x]}*Canvas$Scale];
      Canvas$GCoord[{x_,y_}]:={10^x,y};
      CoordLimitedX[x_]:=
        Restrict[Log[10,Restrict[x,EPS,Infinity]],
          Canvas$PlotRange[[1,1]],Canvas$PlotRange[[1,2]]];
      CoordLimitedY[x_]:=
        Restrict[x,Canvas$PlotRange[[2,1]],Canvas$PlotRange[[2,2]]],

      {Log,Log},
      Canvas$Coord[x_]:=Round[Canvas$Offset+
        Log[10,Restrict[x,EPS,Infinity]]*Canvas$Scale];
      Canvas$GCoord[x_]:=10^x;
      CoordLimitedX[x_]:=
        Restrict[Log[10,Restrict[x,EPS,Infinity]],
          Canvas$PlotRange[[1,1]],Canvas$PlotRange[[1,2]]];
      CoordLimitedY[x_]:=
        Restrict[Log[10,Restrict[x,EPS,Infinity]],
          Canvas$PlotRange[[2,1]],Canvas$PlotRange[[2,2]]]]];
  Block[{x,y},
    Off[General::wrongtype];
    CoordLimited[{x_,y_}]=Canvas$Coord[{CoordLimitedX[x],
      CoordLimitedY[y]}];
    On[General::wrongtype]
    ]
  );

  SetupFrame[op_,rect_,scr_,align_]:=First[{
    MakeWindow[rect,AspectRatio/.op/.AspectRatio->Automatic],
    Canvas$Axes=First[scr];
    Canvas$PlotRange=FrameRange2/@MapThread[FrameRange,scr];
    SetEffectiveRange[];
    SetCanvas$Scale[align];
    }];

  FrameRange2[{0,0}]={-0.001,0.001};
  FrameRange2[{min_,min_}]:=MinMax[{min*0.999,min*1.001}];
  FrameRange2[{min_,max_}]:=If[max-min<1e-100,(min+max)/2*{0.999,1.001},{min,max},{min,max}];
!  FrameRange2[{min_,max_}]:=If[min-1e100<max<min,{max,min},{min,max},{min,max}];
  FrameRange2[x_]:=x;
  FrameRange1[Linear|Date,Automatic,x1_,x2_]:=x1+0.07*(x1-x2);
  FrameRange1[Linear|Date,x_,__]:=x;
  FrameRange1[Log,Automatic,x1_,x2_]:=
    Log[10,Max[x1,EPS]]+0.07*Log[10,Max[x1,EPS]/Max[x2,EPS]];
  FrameRange1[Log,x_,__]:=Log[10,Max[EPS,x]];
  FrameRange[s_,{Automatic,Automatic},{b1_,b2_}]:=
    {FrameRange1[s,Automatic,b1,b2],FrameRange1[s,Automatic,b2,b1]};
  FrameRange[s_,{Automatic,r2_},{b1_,_}]:=
    {FrameRange1[s,Automatic,Min[b1,r2],r2],FrameRange1[s,r2,r2,b1]};
  FrameRange[s_,{r1_,Automatic},{_,b2_}]:=
    {FrameRange1[s,r1,r1,b2],FrameRange1[s,Automatic,Max[b2,r1],r1]};
  FrameRange[s_,{r1_,r2_},{__}]:={FrameRange1[s,r1,r1,r2],FrameRange1[s,r2,r2,r1]};

  LTImg[text_,opt___]:=(LTImg[text,opt]=
    Module[{f},
!      Print["LTImg: ",{text,opt}];
      f=lt@Typeset[text,opt];
      CreateImage[Image[The$Canvas,PhotoImage[f,File->f,Format->"png"]]];
      System["rm "//f];
      f]);

  GetResize[font_]:=(GetResize[font]=StandardForm[
    Module[{s=Max[Round[GetFontSize[font]*LTfs],LTfmin]},
      s//"%"]]);

  With[{def={`Angle->0,`Font->DefaultFont,`UseBG->True}},
    DrawText[text_,pos_,opt___]:=If[`$HaveLaTeX <=> "" && StringLength[text]>2 && text[1,2]=="\\@",
      Module[{{op1,op2}=SwitchCases[{opt},{(Rule|RuleDelayed)[`Angle|`Font|`Justify|`UseBG|`Fill,_],_}],
        rot,font,bg,a,op={},sz},
!        Print["DTopts: ",{op1,op2}];
        {rot,font,bg}={`Angle,`Font,`UseBG}/.op1/.def;
        If[rot,op={`Rotate->-rot}];
        AppendTo[op,Resize->GetResize[font]];
        AppendTo[op,`UseBG->bg];
        a=LTImg[text[3,-1],Null@@op,Null@@op2];
        The$Canvas[Create$Image]={Null@@pos,Image->a,Null@@op2}],
      CanvasWidget[Create$Text]={pos,Text->text,opt}]];

  With[{tag="dummytag"},
    CanvasTextSize[t_,font_]:=Module[{bb},
      DrawText[t,{0,0},Tags->tag,Font->font];
!      CanvasWidget[Create$Text]={{0,0},Anchor->"nw",
!        Text->t,Tags->tag,Font->font,Fill->CanvasWidget[BG]};
      bb=CanvasWidget[BBox[tag]];
      CanvasWidget[Delete]=tag;
      CanvasTextSize[t,font]={bb[[3]]-bb[[1]],bb[[4]]-bb[[2]]}]];

  MakeWindow[Automatic,ar_]:=Module[
    {wxc,wyc,
      {wx1,wx2}=Canvas$RawWindow[[1]],
      {wy1,wy2}=Canvas$RawWindow[[2]],ar0=ar},
    WindowAspectRatio=ar;
    {wx1,wx2}=Restrict[First[Canvas$PlotRegion]*(wx2-wx1)+wx1,XMax*Margin[[1,1]],XMax*Margin[[1,2]]];
    {wy1,wy2}=Restrict[Second[Canvas$PlotRegion]*(wy2-wy1)+wy1,YOrg*Margin[[2,1]],YOrg*Margin[[2,2]]];
    {wxc,wyc}={wx1+wx2,wy1+wy2}/2;
    If[~RealQ[ar0],ar0=RawWindowAspectRatio];
    If[ar0<=(wx2-wx1)/(wy2-wy1),
      {wx1,wx2}=wxc+(wy2-wy1)*ar0/{-2,2},
      {wy1,wy2}=wyc+(wx2-wx1)/ar0/{-2,2}];
    Canvas$Window={{wx1,wx2},{wy1,wy2}};
    AppendTo[WindowList,Canvas$Window];
    Abs[{wx2-wx1,wy2-wy1}/$DefaultWindowWidth]];

  WindowRatio[w_]:=With[{rw=Canvas$RawWindow,pr=Canvas$PlotRegion},
    {{w[[1,1]]-rw[[1,1]],w[[1,2]]-rw[[1,1]]},
     {w[[2,1]]-rw[[2,1]],w[[2,2]]-rw[[2,1]]}}/
       {rw[[1,2]]-rw[[1,1]],rw[[2,2]]-rw[[2,1]]}/{pr[[1,2]]-pr[[1,1]],pr[[2,2]]-pr[[2,1]]}
    +pr[[,1]]];

  MakeWindow[{{x1_,y1_},{x2_,y2_}},ar_]:=Module[
    {wxc,wyc,
      {wx1,wx2}=Canvas$RawWindow[[1]],
      {wy1,wy2}=Canvas$RawWindow[[2]],ar0=ar,dar},
    {wx1,wx2}=Restrict[First[Canvas$PlotRegion]*(wx2-wx1)+wx1,XMax*Margin[[1,1]],XMax*Margin[[1,2]]];
    {wy1,wy2}=Restrict[Second[Canvas$PlotRegion]*(wy2-wy1)+wy1,YOrg*Margin[[2,1]],YOrg*Margin[[2,2]]];
    {wx1,wx2}={x1,x2}*(wx2-wx1)+wx1;
    {wy1,wy2}={y1,y2}*(wy2-wy1)+wy1;
    dar=(wx2-wx1)/(wy2-wy1);
    {wxc,wyc}={wx1+wx2,wy1+wy2}/2;
    If[RealQ[ar0],
      If[ar0<=dar,
        {wx1,wx2}=wxc+(wy2-wy1)*ar/{-2,2},
        {wy1,wy2}=wyc+(wx2-wx1)/ar/{-2,2}],
      ar0=dar];
    Canvas$Window={{wx1,wx2},{wy1,wy2}};
    AppendTo[WindowList,Canvas$Window];
    Abs[{wx2-wx1,wy2-wy1}/$DefaultWindowWidth]];

  LegendOffset[_]={0,0};

  FrameBind[fr_]:=(
    Bind[CanvasWidget,"<Double-Button-1>",
      Canvas$FrameClick[fr],Tags->FrameTag];
    FrameBind[fr]=Null);

  With[{def={Tags->False,
    FrameLabel->{},
    FrameUnitLabel->{},
    Frame->True,
    FrameColor->"black",
    TickColor->Null,
    Scale->{Linear,Linear},
    FrameTicks->{True,True,Ticks,Ticks},
    FrameClick->True,
    FrameThickness->Automatic,
    InfoBind->True,
    GridLines->{None,None},
    Alignment->Automatic,
!    MergeLegend->False,
    TickSize->Automatic,
    TickFont->Default,
    Literal[LegendBG]->Null,
    Literal[FontScale]->1,
    Literal[TickFontScale]->1,
    Literal[FrameFontScale]->1,
    Literal[LegendFontScale]->1,
    Literal[TitleFontScale]->1,
    RemoveOverlap->"",
    PlotLabel->"",Background->"#ffffff"},
    CanvasListVar:={EffectiveRange,EffectiveAxes,EffectiveGL,
      Canvas$PlotRange,Canvas$Axes,
      Canvas$Scale,Canvas$Offset},
    nullsl={"","","",""},nullsl2={"",""}},

    CanvasDrawer[opt_,list_,init_,w_,rect_,last_,ini_]:=StandardForm[Module[
      {fl,pl,ft,wsx,wsy,wsfx,wsfy,det,wc,fr,tag,t1,t2,addtag,enc,glist,ws,
        pr,id,l1,align,up,ts,frid,fclk,dr,plr,sca,gr,ib,tkf,frt,frt1,rmo,
        op=Override[opt,def],wfr,ftc,tkc,ful},
      {tag,fl,pl,fr,wc,align,pr,fclk,dr,ft,frt,ftc,tkc,ts,ib,tkf,ful,rmo,
        LegendBG,
        FontScale,TickFontScale,FrameFontScale,LegendFontScale,TitleFontScale}=
          {Tags,FrameLabel,PlotLabel,Frame,Background,Alignment,
          PlotRegion,FrameClick,DataRange,FrameTicks,FrameThickness,
          FrameColor,TickColor,TickSize,
          InfoBind,TickFont,FrameUnitLabel,RemoveOverlap,
          Literal[LegendBG],
          Literal[FontScale],Literal[TickFontScale],
          Literal[FrameFontScale],Literal[LegendFontScale],
          Literal[TitleFontScale]}/.op;
      FrameFontScale=ExpandFP[FrameFontScale];
      TickFontScale=ExpandFP[TickFontScale];
      If[w,
        If[ini,
          Canvas$Initialize=init;
          If[init<=>False,
            Canvas$Frame=0;
            WindowList=LegendList=BGItems={};
            FirstBG="";
            If[init <=> Frame,Legends=TickLabels=TickListY={}];
            Canvas$PlotRegion=pr]];
        If[Canvas$Initialize===Frame &&
          Canvas$Frame>0 && 
            WindowID[Canvas$Frame]<
              Length[GraphicsList[[Canvas$Frame]]],
          CanvasWidget[Delete]=
            Flatten[
              Range@@[Drop[Canvas$IDList[[Canvas$Frame]],
                WindowID[Canvas$Frame]],{1}]]];
        frid=If[init<=>False,
          ++Canvas$Frame,
          Canvas$Frame];
        FrameTag="F$"//Canvas$Frame;
        If[Length[LegendList]<frid,
          AppendTo[LegendList,{}]];
        If[Length[DefaultOption]<frid,
          AppendTo[DefaultOption,{}]];
        WindowID[frid]=0;
        {plr,sca,gr}=OverrideOptions[frid,op];
        {wsx,wsy}=If[fr || init <=>False,
          If[Length[TickListY]<=Length[WindowList],AppendTo[TickListY,{}]];
          SetupFrame[op,rect,{sca,plr,dr},align],
          {1,1}];
        If[Length[GraphicsList]<frid,
          AppendTo[GraphicsList,{}];
          AppendTo[Canvas$IDList,{{0,0}}]],
        frid=Canvas$Frame];

      (* Return Canvas Frame ID to delayed binding symbol with FrameID *)
      If[Length[Select[Flatten[op],
	(Head[#]===RuleDelayed && #[[1]]===FrameID)&]]>0,
	Apply[Set, {Extract[Hold[FrameID]/.op, {1}, Unevaluated], frid}]];

      id=++WindowID[frid];
      glist={{list,opt},CanvasListVar};
      Switch[Canvas$Initialize,
        Frame,
        If[Length[GraphicsList[[frid]]]>=id,
          If[GraphicsList[[frid,id]]===glist,
            l1=Cases[Flatten[{list},1],
              Rectangle[_,_,(_Graphics|_List)..,___],
              {1}];
            Scan[Primitive,l1];
            Return[frid],
            CanvasWidget[Delete]=Range@@Canvas$IDList[[frid,id]]
            ]],
        False,
        If[ini && w,
          Canvas$IDList={{{0,0}}};
          LegendList=GraphicsList={{}}],
        _,
        If[ini && w,
          ClearCanvas[];
          SetupCM[];
          Canvas$PlotLabel=0;
          Canvas$IDList={{{0,0}}};
          LegendList=GraphicsList={{}}]];
      If[Length[GraphicsList[[frid]]]>=id,
        GraphicsList[[frid,id]]=glist;
        Canvas$IDList[[frid,id]]={0,0},
        AppendTo[GraphicsList[[frid]],glist];
        AppendTo[Canvas$IDList[[frid]],{0,0}]];
      StartID=CanvasLastID+1;
      If[addtag=(tag<=>False),t1=StartID];
      If[w,
        If[wfr=(Canvas$PlotRange[[1,1]]<Canvas$PlotRange[[1,2]] && 
          Canvas$PlotRange[[2,1]]<Canvas$PlotRange[[2,2]]),
          If[fr<=>False,
            ft=ExpandFrameTicks[ft];
            ts=Take[Flatten[{ts,ts}],2];
            {wsfx,wsfy}={
              Min[wsx*RawWindowAspectRatio,Max[wsy,wsx]],
              Min[wsy/0.7,Max[wsy,wsx]]};
            frt1=frt/.(Automatic->Min[(Plus@@CanvGeo[])/500*Sqrt[wsfx*wsfy],2]);
            ful=Take[Join[ful,nullsl],4];
            If[tkc===Null,
              tkc=ftc];
            tkc=Take[Flatten[{tkc,tkc,tkc,tkc}],4];
            FrameY[Second[ft],ft[[4]],
              Second[ts]/.Automatic->Max[0.15,wsfx^(.4)],Second[gr],wsfy^0.4,
              tkf,frt1,ful,frid,ftc,tkc[[{2,4}]]];
!            Print["calling FrameX ",{wsfx,wsfy}];
            FrameX[First[ft],Third[ft],
              First[ts]/.Automatic->Max[0.15,wsfy^(.4)],First[gr],wsfx^0.6,
              tkf,frt1,ful,ftc,tkc[[{1,3}]]];
            FrameBind[frid];
            fl=Take[Join[fl,nullsl],4];
            fl={fl,{"BOTTOM","LEFT CENTER","TOP","RIGHT CENTER"},
              DefaultTitleSize*(StandardScale*{wsfx,wsfy,wsfx,wsfy})^0.45};
            ScanThread[If[""<=>#<=>nullsl2,
              MakeTitle[#,Restrict[#3,9,28],#2]]&,fl]]
          ]];
      If[Head[list]===List,
        Scan[Primitive,list],
        Primitive[list]];
      If[last && frid<=Length[LegendList] && LegendList[[frid]]<=>{},
        Canvas$Legend[frid,Canvas$Range];
        LegendList[[frid]]={}];
      If[addtag,
        t2=CanvasLastID;
        If[~NumberQ[tag],
          CanvasWidget[AddTag$Above]={tag,t1-1}]];
      If[w,
        If[""<=>pl<=>nullsl2,
          If[Canvas$PlotLabel<=>0,
            CanvasWidget[Delete]=Canvas$PlotLabel];
          MakeTitle[pl,Restrict[TitleFontScale*DefaultTitleSize*1.3*(wsx*wsy)^(.4),8,40],"TOP HIGH"];
          Canvas$PlotLabel=CanvasLastID
          ];
        If[wfr && StringQ[wc],
          WindowBG[frid,wc,fr,ib,ftc]]
        ];
      If[Length[Canvas$IDList[[frid]]]>=id,
        Canvas$IDList[[frid,id]]={StartID,CanvasLastID},
        AppendTo[Canvas$IDList[[frid]],
          {StartID,CanvasLastID}]];
      StartID=CanvasLastID+1;
      If[last,
        DeleteOverlapLabel[]];
      Remove$Overlap[rmo];
      frid]]];

  OverlapQ[r1_,r2_]:=
    ~(r1[[1]]>r2[[3]] || r2[[1]]>r1[[3]] ||
     r1[[2]]>r2[[4]] || r2[[2]]>r1[[4]]);
  ExtendBB[r1_,r2_]:={
    Min[r1[[1]],r2[[1]]],
    Min[r1[[2]],r2[[2]]],
    Max[r1[[3]],r2[[3]]],
    Max[r1[[4]],r2[[4]]]};

  ExpandFP[x_Real]:={x,x,x,x};
  ExpandFP[{x_Real}]:={x,1,1,1};
  ExpandFP[{x_Real,y_Real}]:={x,y,1,1};
  ExpandFP[{x_Real,y_Real,z_Real}]:={x,y,z,1};
  ExpandFP[x_]:=x;
  
  Remove$Overlap[""]=Null;
  Remove$Overlap[t_]:=Module[{p=CanvasWidget[Find$WithTag[t]],
    r1={Infinity,Infinity,-Infinity,-Infinity},r2},
    If[Length[p],
      r2=CanvasWidget[BBox[p[[1]]]]];
    While[Length[p]>1,
      r1=ExtendBB[r1,r2];
      p=Rest[p];
      While[Length[p],
        If[OverlapQ[r1,r2=CanvasWidget[BBox[p[[1]]]]],
          CanvasWidget[Delete]=p[[1]];
          p=Rest[p],
          Break[]]]]];

  DeleteOverlapLabel[]:=Module[{p=Union[TickLabels],r,t,rt},
    TickLabels=p;
    If[Length[p]>1,
      r={CanvasWidget[BBox[p[[1]]]]};
      p=Rest[p];
      While[Length[p],
        t=CanvasWidget[Find$WithTag[p[[1]]]];
        Do[
          If[Length[t]<=1,Break[]];
          rt=CanvasWidget[BBox[t[[1]]]];
          Scan[
            If[OverlapQ[rt,#],
              CanvasWidget[Delete]=t[[1]];
              Break[]]&,
            r];
          t=Reverse[Rest[t]],
          {2}];
        AppendTo[r,CanvasWidget[BBox[p[[1]]]]];
        p=Rest[p]]]];

  ExpandFrameTicks[Automatic]={True,True,Ticks,Ticks};
  ExpandFrameTicks[{Automatic,l__}]:=ExpandFrameTicks[{True,l}];
  ExpandFrameTicks[{b_,Automatic,t___}]:=ExpandFrameTicks[{b,True,t}];
  ExpandFrameTicks[{b_,l_,Automatic,r___}]:=ExpandFrameTicks[{b,l,Ticks,r}];
  ExpandFrameTicks[{b_,l_,t_,Automatic}]:={b,l,t,Ticks};
  ExpandFrameTicks[{b_}]:={b,True,Ticks,Ticks};
  ExpandFrameTicks[{b_,l_}]:={b,l,Ticks,Ticks};
  ExpandFrameTicks[{b_,l_,t_}]:={b,l,t,Ticks};
  ExpandFrameTicks[b_List]:=b;
  ExpandFrameTicks[b_]:={b,b,b,b};

  SetEffectiveRange[]:=Module[
    {plr1=PlotRange/.DefaultOption[[Canvas$Frame]]},
    EffectiveRange=If[plr1===PlotRange,
      Canvas$PlotRange,
      MapThread[SetPerm2,{plr1,Canvas$PlotRange}]]];

  SetPerm[Permanent[x_],_]:=Permanent[x];
  SetPerm[_,y_]:=y;
  SetPerm2[{Permanent[x1_],Permanent[x2_]},_]:={Permanent[x1],Permanent[x2]};
  SetPerm2[{Permanent[x1_Real],_},{_,y2_Real}]:={Permanent[x1],Max[y2,x1]};
  SetPerm2[{Permanent[x1_],_},{_,y2_}]:={Permanent[x1],y2};
  SetPerm2[{_,Permanent[x2_Real]},{y1_Real,_}]:={Min[y1,x2],Permanent[x2]};
  SetPerm2[{_,Permanent[x2_]},{y1_,_}]:={y1,Permanent[x2]};
  SetPerm2[_,y_]:=y;
  ChoosePerm[Permanent[x_],_]:=x;
  ChoosePerm[_,y_]:=y;
  ChoosePerm2[{Permanent[x1_],Permanent[x2_]},_]:={x1,x2};
  ChoosePerm2[{Permanent[x1_Real],_},{_,y2_Real}]:={x1,Max[y2,x1]};
  ChoosePerm2[{Permanent[x1_],_},{_,y2_}]:={x1,y2};
  ChoosePerm2[{_,Permanent[x2_Real]},{y1_Real,_}]:={Min[y1,x2],x2};
  ChoosePerm2[{_,Permanent[x2_]},{y1_,_}]:={y1,x2};
  ChoosePerm2[_,y_]:=y;

  OverrideOptions[fr_,op_]:=Module[{
    {plr,sca,gr}={PlotRange,Scale,GridLines}/.op,
    {plr1,sca1,gr1}={PlotRange,Scale,GridLines}/.DefaultOption[[fr]]},
    plr=Switch[plr,
      Automatic,
      {{Automatic,Automatic},{Automatic,Automatic}},
      {{__},{__}},plr,
      {{__},Automatic},{First[plr],{Automatic,Automatic}},
      {Automatic,{__}},{{Automatic,Automatic},plr[[2]]},
      {__},{{Automatic,Automatic},plr}];
    If[plr1<=>PlotRange,
      plr=
        MapThread[ChoosePerm2,{plr1,plr}]];
    Switch[sca,
      _Symbol,sca={Linear,sca}];
    gr=gr/.{True->Automatic,False->None};
    If[~ListQ[gr],gr={gr,gr}];
    If[sca1===Scale,
      EffectiveAxes=sca,
      EffectiveAxes=MapThread[SetPerm,{sca1,sca}];
      sca=MapThread[ChoosePerm,{sca1,sca}]];
    If[gr1===GridLines,
      EffectiveGL=gr,
      EffectiveGL=MapThread[SetPerm,{gr1,gr}];
      gr=MapThread[ChoosePerm,{gr1,gr}]];
    {plr,sca,gr}];

  TitlePosition["LEFT CENTER",t_:"L"]:=Module[
    {f=CanvasWidget[BBox[t//"F$Y1"//Canvas$Frame]],
      e=CanvasWidget[BBox["E"//t//"F$Y1"//Canvas$Frame]],
      c=WindowCoord[
        {Canvas$Window[[1,1]]-12/DPI,
          (Canvas$Window[[2,1]]+Canvas$Window[[2,2]])/2}]},
    If[f==={},{c,(Canvas$Window[[2,2]]-Canvas$Window[[2,1]])*DPI,"e"},
      {{First[f]-1,Second[c]},f[[4]]-Max[Second[f],If[e<=>{},e[[4]],0]],"e"}]];
  TitlePosition["RIGHT CENTER",t_:"L"]:=Module[
    {f=CanvasWidget[BBox[t//"F$Y2"//Canvas$Frame]],
      e=CanvasWidget[BBox["E"//t//"F$Y2"//Canvas$Frame]],
      c=WindowCoord[
        {Canvas$Window[[1,2]]+12/DPI,
          (Canvas$Window[[2,1]]+Canvas$Window[[2,2]])/2}]},
    If[f==={},{c,(Canvas$Window[[2,2]]-Canvas$Window[[2,1]])*DPI,"w"},
      {{Third[f]+1,Second[c]},f[[4]]-Max[Second[f],If[e<=>{},e[[4]],0]],"w"}]];
  TitlePosition["BOTTOM",t_:"L"]:=Module[
    {f=CanvasWidget[BBox[t//"F$X1"//Canvas$Frame]],
      c=WindowCoord[
        {(Canvas$Window[[1,1]]+Canvas$Window[[1,2]])/2,
          Canvas$Window[[2,1]]-24/DPI}]},
    If[f==={},{c,(Canvas$Window[[1,2]]-Canvas$Window[[1,1]])*DPI,"n"},
      {{First[c],f[[4]]-1},(Canvas$Window[[1,2]]-Canvas$Window[[1,1]])*DPI,"n"}]];
  TitlePosition["TOP",t_:"L"]:=Module[
    {c=WindowCoord[
      {(Canvas$Window[[1,1]]+Canvas$Window[[1,2]])/2,Canvas$Window[[2,2]]}],
      f=If[t==="",{},
        CanvasWidget[BBox[{t//"F$X2"//Canvas$Frame,"LF$Y1"//Canvas$Frame,"LF$Y2"//Canvas$Frame}]]]},
    {If[f==={},c+{0,-1},
      {First[c],Min[Second[f],Second[c]]-1}],
      (Canvas$Window[[1,2]]-Canvas$Window[[1,1]])*DPI,"s"}];
  TitlePosition["TOP HIGH",t_:"L"]:=Module[
    {f,c=WindowCoord[
        {(Canvas$Window[[1,1]]+Canvas$Window[[1,2]])/2,
          Canvas$Window[[2,2]]+4/DPI}]},
    f=Min[
      Table[(CanvasWidget[BBox[{"F$X2"//i,"LF$X2"//i,"T$T"//i}]]/.{}->c)[[2]],{i,Length[GraphicsList]}]];
    {{First[c],f-5},(Canvas$Window[[1,2]]-Canvas$Window[[1,1]])*DPI,"s"}];
  TitleTag["LEFT CENTER"]:="T$LC"//Canvas$Frame;
  TitleTag["RIGHT CENTER"]:="T$RC"//Canvas$Frame;
  TitleTag["BOTTOM"]:="T$B"//Canvas$Frame;
  TitleTag["TOP"]:="T$T"//Canvas$Frame;
  TitleTag["TOP HIGH"]:="T$TH"//Canvas$Frame;

  TitleRotate["LEFT CENTER"]:={RotSym->90,Anchor->"e",Tags->"FL$Y1"//Canvas$Frame};
  TitleRotate["RIGHT CENTER"]:={RotSym->270,Anchor->"w",Tags->"FL$Y2"//Canvas$Frame};
  TitleRotate["BOTTOM"]:={Anchor->"n",Tags->"FL$X1"//Canvas$Frame};
  TitleRotate["TOP"]:={Anchor->"s",Tags->"FL$X2"//Canvas$Frame};
  TitleRotate["TOP HIGH"]:={Anchor->"s",Tags->"PL"//Canvas$Frame};
  TitleRotate[_]:={Anchor->"c"};

  EffectiveStringLength[s_,m_]:=(EffectiveStringLength[s,m]=
    If[`$HaveLaTeX<=>"",
      Round[CanvasTextSize[s,DefaultFont][[1]]/GetFontSize[DefaultFont]],
      Module[{p=StringPosition[s,"\n"],s1,l,q,d},
        s1=If[p==={},
          s,
          l=StringLength[s]+1;
          p=Join[{{0,0}},p,{{l,l}}];
          d=Join[{{0,0}},Difference[p]];
          q=Position[d,{Max[d],_},1,1][[1,1]];
          s[p[[q-1,1]]+1,p[[q,1]]-1]];
        Max[StringLength[s1]-Length[StringPosition[s1,"`"]]*2,m]]]);
  NLines[t_]:=(NLines[t]=Length[StringPosition[t,"\n"]]+1);

  FFont[x_,_]:=x;
  FFont[x:{x1_},n_]:=x1;
  FFont[x:{x1_,x2_},n_]:={x1,x2,x1,x2}[[n]];
  FFont[x:{x1_,x2_,x3_},n_]:={x1,x2,x3,x2}[[n]];
  FFont[x_List,n_]:=x[[n]];
  FScale[x_Real,_]:=x;
  FScale[x_List,n_]:=Join[x,{1,1,1,1}][[n]];

  DefaultSize[t_,w_,size_,pos_,"e"]:=Module[{fl=0,bl},
      Do[bl=CanvasWidget[BBox[{"LF$Y2"//i,"FL$Y2"//i,"F$Y2"//i}]];
        If[bl<=>{} && bl[[1]]<pos[[1]] && bl[[2]]<=pos[[2]]<=bl[[4]],
          fl=Max[fl,bl[[3]]]],
        {i,0,Canvas$Frame}];
    Round[FontScale*FScale[FrameFontScale,2]
      *Max[9,size*0.7,Min[w/EffectiveStringLength[t,16]*FSFontScale,pos[[1]]-fl-1,size*1.3]]]];
  DefaultSize[t_,w_,size_,pos_,"w"]:=Module[{fl=CanvasWidget[Width],bl},
      Do[bl=CanvasWidget[BBox[{"LF$Y1"//i,"FL$Y1"//i,"F$Y1"//i}]];
        If[bl<=>{} && bl[[3]]>pos[[1]] && bl[[2]]<=pos[[2]]<=bl[[4]],
          fl=Min[fl,bl[[1]]]],
        {i,0,Canvas$Frame}];
    Round[FontScale*FScale[FrameFontScale,4]
      *Max[9,size*0.7,Min[w/EffectiveStringLength[t,16]*FSFontScale,fl-pos[[1]]-1,size*1.3]]]];
  DefaultSize[t_,w_,size_,pos_,"s"]:=Module[{bl,fl=0},
      Do[bl=CanvasWidget[BBox[{"LF$X1"//i,"FL$X1"//i,"F$X1"//i}]];
        If[bl<=>{} && bl[[4]]<pos[[2]] && bl[[1]]<=pos[[1]]<=bl[[3]],
          fl=Max[fl,bl[[4]]]],
        {i,0,Canvas$Frame}];
    Round[FontScale*FScale[FrameFontScale,3]
      *Max[9,size*0.7,Min[w/EffectiveStringLength[t,16]*FSFontScale,(pos[[2]]-fl-1)/NLines[t]/1.2,size*1.3]]]];
  DefaultSize[t_,w_,size_,pos_,"n"]:=Module[{bl,fl=CanvasWidget[Height]},
    Do[bl=CanvasWidget[BBox[{"LF$X2"//i,"FL$X2"//i,"F$X2"//i}]];
      If[bl<=>{} && bl[[2]]>pos[[2]] && bl[[1]]<=pos[[1]]<=bl[[3]],
        fl=Min[fl,bl[[2]]]],
      {i,0,Canvas$Frame}];
    Round[FontScale*FScale[FrameFontScale,1]
      *Max[9,size*0.7,Min[w/(EffectiveStringLength[t,16])*FSFontScale,fl-pos[[2]]-1,size*1.3]]]];

  MakeTitle["",__]:=Null;
  MakeTitle[t_,size_,p_]:=Module[{{pos,w,anc}=TitlePosition[p],sz,it=0},
    While[~RealQ[w],
      If[it++ > 10, Return[]];
      Sleep[0.3];
      {pos,w,anc}=TitlePosition[p]];
    sz=DefaultSize[t,w,size,pos,anc];
!    CanvasWidget[Create$Text]={pos,Text->t,
    DrawText[t,pos,
      Anchor->anc,
      Justify->"center",
      Tags->TitleTag[p],
      Font->TextFont[sz,DefaultFont,
        If[sz<10,Null[],"bold"]],
      Null@@TitleRotate[p],
      UseBG->False]];
  MakeTitle[Text[{t_String,___},opt:((_Rule|_RuleDelayed)...)],size_,p_]:=Module[
    {{pos,w,anc}=TitlePosition[p]},
    While[~RealQ[w],
      If[it++ > 10, Return[]];
      Sleep[0.3];
      {pos,w,anc}=TitlePosition[p]];
    Primitive[Text[{t,CanvasScaled/@pos},opt,
      TextFont:>{Round[size],DefaultFont,If[size<10,Null[],"bold"]},
      Anchor->anc,
      Justify->"center",
      Tags->TitleTag[p],
      Null@@(TitleRotate[p]/.RotSym->TextRotate),
      UseBG->False]]];
  MakeTitle[t_List,size_,p_]:=MakeTitle[First[t],size,p];

  With[{def={Dashing->{1},Plot->False,ErrorBarTickSize->1,
    ErrorBarThickness->1,ErrorBarColor->Default,PlotJoined->True,StepRatio->1,
    PointSize->1,PointSymbol->"1O",PlotColor->"Black",Thickness->1,
    PointBorderColor->Automatic,Legend->False,Arrow->Null,ArrowShape->Null,Clip->True,
    LineTags->Null,PointTags->Null,PointColor->"forest green"}},

    Primitive[Line[body_,opt___]]:=Module[
      {pc,pl,pj,sr,size,sym,ebl,ptc,dash,ltag,ptag,thick,pbc,leg,arr,clip,canvr=Canvas$Range,
        bt=Thread[body],op=Override[opt,def],cmd,ebth,ebc,arrs},
      {pc,pl,pj,sr,size,sym,ebl,ptc,dash,ltag,ptag,thick,pbc,leg,ebth,ebc,arr,arrs,clip}=
        {PlotColor,Plot,PlotJoined,StepRatio,PointSize,PointSymbol,
	  ErrorBarTickSize,PointColor,Dashing,LineTags,PointTags,Thickness,
          PointBorderColor,Legend,ErrorBarThickness,ErrorBarColor,Arrow,ArrowShape,Clip}/.op;
      ebc=ebc/.Default->pc;
      dash=Switch[dash,
        1,{1},
        _Real,{dash,dash/3},
        _,dash];
      If[~clip,Canvas$Range={{-Infinity,-Infinity},{Infinity,Infinity}}];
      cmd={Fill->pc,
        If[ltag<=>Null,TagFrame[ltag]=Canvas$Frame;Tags->ltag,Null[]],
        If[arr<=>Null,Arrow->arr,Null[]],
        If[arrs<=>Null,ArrowShape->arrs,Null[]],
        If[thick<>1,Width->thick,Null[]]};
      Switch[pj,
	Step,  CanvasDrawerLine[cmd, dash, Thread[Canvas$StepData[sr, body]]],
	True,  CanvasDrawerLine[cmd, dash, bt],
	False, (* Broken *)
	  Print["Canvas: Primitive[Line[...]] catch PlotJoined->False"],
	_,     (* Unsupported *)
	];
      If[pl, CanvasDrawerPoints[sym, ptag, ptc, pc, size, pbc, bt]];
      CanvasDrawerErrorBar[ebl * 0.1 * DPI, ebth, ebc, bt];
      If[leg<=>False,
        AppendLegend[{op,leg}]];
      Canvas$Range=canvr;
      ]];
  Primitive[Line[{},___]]:=Null;

  AppendLegend[l:{op_,leg_}]:=(
    If[LegendList[[Canvas$Frame]] <=>{},
      Module[{{op1,leg1}=LegendList[[Canvas$Frame,-1]],opm},
        If[leg==leg1,
          opm=If[~(Plot/.#),
            DeleteCases[#,(PointColor|PointBorderColor)->_,1],#,#]&/@{op,op1};
          opm=If[~(PlotJoined/.#),
            DeleteCases[#,(PlotColor|Thickness)->_,1],#,#]&/@opm;
          LegendList[[Canvas$Frame,-1,1]]=
            Override[
              Plot->(Plot/.op)||(Plot/.op1),
              PlotJoined->(PlotJoined/.op)||(PlotJoined/.op1),Join@@opm];
          Return[]]]];
    AppendTo[LegendList[[Canvas$Frame]],l]
    );

  With[{CanvasW=Extract[CanvasWidget,{1},Unevaluated$]},
    CanvasDrawerErrorBar[ebl_, ebt_Real, pc_, bt_]:=If[Length[bt]>2,
      Module[{d=Take[bt,2],a},
        a=Join[Canvas$Coord[d],
          Canvas$Scale * ErrorBarData[Canvas$Axes, bt, d]];
        If[ebt<=0,
	  ScanThread[ErrorBar0[ebl, ##, {Width->Max[1,-ebt],Fill->pc}]&,a],
	  ScanThread[ErrorBar[ebl, ##, {Width->ebt, Fill->pc}]&,a]
	  ]]];
  
    CanvasDrawerLine[cmd_, {1} , bt_] := (
      CanvasW[Create$Line]={
        CanvasClipLine[Canvas$Coord[Take[bt, 2]],
          Canvas$Range, {1}],cmd});

    CanvasDrawerLine[cmd_, dash_, bt_] := (
      CanvasW[Create$Line]={
        CanvasClipLine[Canvas$Coord[Take[bt, 2]],
          Canvas$Range, {1}],
        Dash->TclArg[Round[dash*DPI]],cmd});

    CanvasDrawerPoints[sym_ ,, ptc_, pc_, size_, pbc_, bt_] := (
      Canvas$Symbol[, Canvas$Coord[Take[bt,2]], sym,
	PlotSymbolSize * size * Sqrt[512 / Max[512, Length[First[bt]]]],
	ptc, If[Not[StringQ[pbc]], ptc, pbc]]);

    CanvasDrawerPoints[sym_ , tag_, ptc_, pc_, size_, pbc_, bt_] := Module[
      {n=Length[First[bt]], tl},
      tl=If[Head[tag]===List,
        If[Length[tag]==2 && NumberQ[Second[tag]],
          Table[First[tag]//i, {i, Second[tag], Second[tag]+n-1}],
          tag],
        Table[tag//i, {i, n}]];
      (TagFrame[#]=Canvas$Frame)&/@tl;
      Canvas$Symbol[tl, Canvas$Coord[Take[bt,2]], sym,
	PlotSymbolSize * size * Sqrt[512 / Max[512, n]],
	ptc, If[Not[StringQ[pbc]], ptc, pbc]];
      ];
    ];

  Canvas$StepData[0, body_] := MapThread[Null, {body[[,{1,2}]],
    Thread[{body[[,1]], Append[Rest[body[[,2]]], body[[-1,2]]]}]}];

  Canvas$StepData[1, body_] := MapThread[Null, {body[[,{1,2}]],
    Thread[{Append[Rest[body[[,1]]], body[[-1, 1]]], body[[,2]]}]}];

  Canvas$StepData[sr_, body_] := Module[{},
    If[Not[RealQ[sr]], Return[Canvas$StepData[1, body]]];

    If[sr>1, Return[Canvas$StepData[1, body]]];
    If[sr<0, Return[Canvas$StepData[0, body]]];

    With[{xl=Drop[body[[,1]], -1], dx=Difference[body[[,1]]]},
      Return[MapThread[Null, {
	Thread[{Prepend[#, body[[1, 1]]], body[[, 2]]}],
	Thread[{Append[#, body[[-1, 1]]], body[[, 2]]}]}&
	  [xl + sr * dx]]]];
    ];

  ErrorBarData[{Linear|Date,Linear|Date},bt_,d_]:=Take[bt,-2];
  ErrorBarData[{Linear|Date,Log},bt_,d_]:=
    {Third[bt],
      Log[10,Restrict[1+bt[[4]]/Restrict[Second[d],EPS,Infinity],
        EPS,Infinity]]};
  ErrorBarData[{Log,Linear|Date},bt_,d_]:=
    {Log[10,Restrict[1+Third[bt]/Restrict[First[d],EPS,Infinity],
      EPS,Infinity]],bt[[4]]};
  ErrorBarData[{Log,Log},bt_,d_]:=
    {Log[10,Restrict[1+Third[bt]/Restrict[First[d],EPS,Infinity],
      EPS,Infinity]],
      Log[10,Restrict[1+bt[[4]]/Restrict[Second[d],EPS,Infinity],
        EPS,Infinity]]};

  With[{CanvasDrawClipLine[d1_,cmd_]:=
    (CanvasWidget[Create$Line]={
      CanvasClipLine[d1,Canvas$Range],cmd})},

    ErrorBar[ebl_,x_,y_,0,dy_,cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl,0,0,-ebl,ebl},y+{-dy,-dy,-dy,dy,dy,dy}},cmd]);

    ErrorBar[ebl_,x_,y_,0,{dy1_,dy2_},cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl,0,0,-ebl,ebl},y+{-dy1,-dy1,-dy1,dy2,dy2,dy2}},cmd]);

    ErrorBar[ebl_,x_,y_,dx_,dy_,cmd_]:=
      CanvasDrawClipLine[
        { x+{-ebl,ebl,0,  0,-ebl,ebl, 0,0,-dx,-dx, -dx,-dx,dx,  dx, dx},
          y+{-dy, -dy,-dy,dy,dy,  dy,dy,0, 0, -ebl,ebl,  0, 0,-ebl,ebl}},cmd];

    ErrorBar[ebl_,x_,y_,{dx1_,dx2_},dy_,cmd_]:=
      CanvasDrawClipLine[
        { x+{-ebl,ebl,0,  0,-ebl,ebl, 0,0,-dx1,-dx1, -dx1,-dx1,dx2,  dx2, dx2},
          y+{-dy, -dy,-dy,dy,dy,  dy,dy,0, 0, -ebl,ebl,  0, 0,-ebl,ebl}},cmd];

    ErrorBar[ebl_,x_,y_,dx_,{dy1_,dy2_},cmd_]:=
      CanvasDrawClipLine[
        { x+{-ebl,ebl,0,  0,-ebl,ebl, 0,0,-dx,-dx, -dx,-dx,dx,  dx, dx},
          y+{-dy1,-dy1,-dy1,dy2,dy2,  dy2,dy2,0, 0, -ebl,ebl,  0, 0,-ebl,ebl}},cmd];

    ErrorBar[ebl_,x_,y_,{dx1_,dx2_},{dy1_,dy2_},cmd_]:=
      CanvasDrawClipLine[
        { x+{-ebl,ebl,0,  0,-ebl,ebl, 0,0,-dx1,-dx1, -dx1,-dx1,dx2,  dx2, dx2},
          y+{-dy1,-dy1,-dy1,dy2,dy2,  dy2,dy2,0, 0, -ebl,ebl,  0, 0,-ebl,ebl}},cmd];

    ErrorBar[0,x_,y_,dx_,dy_,cmd_]:=
      CanvasDrawClipLine[{x+{0,0,0,-dx,dx},y+{-dy,dy,0,0,0}},cmd];

    ErrorBar[0,x_,y_,{dx1_,dx2_},dy_,cmd_]:=
      CanvasDrawClipLine[{x+{0,0,0,-dx1,dx2},y+{-dy,dy,0,0,0}},cmd];

    ErrorBar[0,x_,y_,dx_,{dy1_,dy2_},cmd_]:=
      CanvasDrawClipLine[{x+{0,0,0,-dx,dx},y+{-dy1,dy2,0,0,0}},cmd];

    ErrorBar[0,x_,y_,{dx1_,dx2_},{dy1_,dy2_},cmd_]:=
      CanvasDrawClipLine[{x+{0,0,0,-dx1,dx2},y+{-dy1,dy2,0,0,0}},cmd];

    ErrorBar[ebl_,x_,y_,0,0,cmd_]:=
      CanvasDrawClipLine[{x+{-ebl,ebl},{y,y}},cmd];

    ErrorBar[0,x_,y_,dx_,0,cmd_]:=
      CanvasDrawClipLine[{x+{-dx,dx},{y,y}},cmd];

    ErrorBar[0,x_,y_,{dx1_,dx2_},0,cmd_]:=
      CanvasDrawClipLine[{x+{-dx1,dx2},{y,y}},cmd];

    ErrorBar[0,x_,y_,0,dy_,cmd_]:=
      CanvasDrawClipLine[{{x,x},y+{-dy,dy}},cmd];

    ErrorBar[0,x_,y_,0,{dy1_,dy2_},cmd_]:=
      CanvasDrawClipLine[{{x,x},y+{-dy1,dy2}},cmd];

    ErrorBar[ebl_,x_,y_,dx_,0,cmd_]:=
      CanvasDrawClipLine[{x+{dx,dx,dx,-dx,-dx,-dx},y+{-ebl,ebl,0,0,-ebl,ebl}},cmd];

    ErrorBar[ebl_,x_,y_,{dx1_,dx2_},0,cmd_]:=
      CanvasDrawClipLine[{x+{dx2,dx2,dx2,-dx1,-dx1,-dx1},y+{-ebl,ebl,0,0,-ebl,ebl}},cmd];

    ErrorBar0[ebl_,x_,y_,0,dy_,cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{-dy,-dy}},cmd];
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{ dy, dy}},cmd]);

    ErrorBar0[ebl_,x_,y_,0,{dy1_,dy2_},cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{-dy1,-dy1}},cmd];
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{ dy2, dy2}},cmd]);

    ErrorBar0[ebl_,x_,y_,dx_,dy_,cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{-dy,-dy}},cmd];
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{ dy, dy}},cmd];
      CanvasDrawClipLine[
        {x+{-dx,-dx},y+{-ebl, ebl}},cmd];
      CanvasDrawClipLine[
        {x+{ dx, dx},y+{-ebl, ebl}},cmd]);

    ErrorBar0[ebl_,x_,y_,{dx1_,dx2_},dy_,cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{-dy,-dy}},cmd];
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{ dy, dy}},cmd];
      CanvasDrawClipLine[
        {x+{-dx1,-dx1},y+{-ebl, ebl}},cmd];
      CanvasDrawClipLine[
        {x+{ dx2, dx2},y+{-ebl, ebl}},cmd]);

    ErrorBar0[ebl_,x_,y_,dx_,{dy1_,dy2_},cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{-dy1,-dy1}},cmd];
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{ dy2, dy2}},cmd];
      CanvasDrawClipLine[
        {x+{-dx,-dx},y+{-ebl, ebl}},cmd];
      CanvasDrawClipLine[
        {x+{ dx, dx},y+{-ebl, ebl}},cmd]);

    ErrorBar0[ebl_,x_,y_,{dx1_,dx2_},{dy1_,dy2_},cmd_]:=(
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{-dy1,-dy1}},cmd];
      CanvasDrawClipLine[
        {x+{-ebl,ebl},y+{ dy2, dy2}},cmd];
      CanvasDrawClipLine[
        {x+{-dx1,-dx1},y+{-ebl, ebl}},cmd];
      CanvasDrawClipLine[
        {x+{ dx2, dx2},y+{-ebl, ebl}},cmd]);

    ErrorBar0[0,___]:=Null;

    ];

  WindowBG[frid_,wc_,fr_,ib_,ftc_]:=Module[
    {p=Thread[WindowCoord[Canvas$Window]],frc=If[fr,"black",wc,ftc],
      t="BG$"//frid},
    CanvasWidget[Create$Rectangle]={p,Fill->wc,OutLine->ftc,Width->1,Tags->t};
    If[ib && ~CanvasBind[frid],
      Bind[CanvasWidget,"<Button-1>",CanvasInfo[frid],Tags->t];
      CanvasBind[frid]=True];
    If[FirstBG==="",FirstBG=t];
    AppendTo[BGItems,CanvasLastID];
    CanvasWidget[Lower] = t];
  WindowBG[_,,0,__]=Null;
  WindowBG[_,,fr_,_,ftc_]:=(
    The$Canvas[Create$Rectangle]={Thread[WindowCoord[Canvas$Window]],
      OutLine->ftc,Width->1,Tags->"BG$0"};
    If[FirstBG==="",FirstBG="BG$0"];
    AppendTo[BGItems,CanvasLastID];
    CanvasWidget[Lower] = "BG$0");

  CanvasBind[_]:=False;
  CanvasInfo[fr_]:=Module[{{x,t}={{X,Y},Tag}/.$Event,
    {axes,scale,offset}=GraphicsList[[fr,1,2,{2,6,7}]],co,dx},
    Bind[CanvasWidget,"<Motion>",CanvasInfoUpdate[fr]];
    Bind[CanvasWidget,"<ButtonRelease-1>",DeleteInfo[]];
    CanvasWidget[Lower] = {t};
    CanvasWidget[Create$Rectangle] = Join[{0,0,1,1},
      {Fill->"lemonchiffon",Tags->"infobg"}];
!    CanvasWidget[Create$Text] = Join[
    DrawText[InfoLabel[x,axes,offset,scale],x-{0,10},
      Anchor->"s",Tags->"infolabel"];
    {co,dx}=InfoBBox[];
    If[dx<=>0,CanvasWidget[Move]={"infolabel",dx,0}];
    CanvasWidget[Coords]={"infobg",co}];
  CanvasInfoUpdate[fr_]:=Module[{x={X,Y}/.$Event,
    {axes,scale,offset}=GraphicsList[[fr,1,2,{2,6,7}]],co,dx},
    CanvasWidget[ItemConfigure] =
      {"infolabel",Text->InfoLabel[x,axes,offset,scale]};
    CanvasWidget[Coords]={"infolabel",x-{0,10}};
	{co,dx}=InfoBBox[];
	If[co===Null,DeleteInfo[];Return[]];
	If[dx<=>0,CanvasWidget[Move]={"infolabel",dx,0}];
	CanvasWidget[Coords]={"infobg",co}];

  InfoBBox[]:=Module[{bb=CanvasWidget[BBox["infolabel"]],dx=0,
    w=WidgetInfo[CanvasWidget,Width]},
    If[MatchQ[bb,{_,_,_,_}],bb+={-2,-2,2,2},Return[{,}]];
    If[bb[[1]]<0, dx=-bb[[1]];bb+={dx,0,dx,0}];
	If[bb[[3]]>w, dx=w-bb[[3]];bb+={dx,0,dx,0}];
    {bb,dx}];
  DeleteInfo[]:=(Bind[CanvasWidget,"<Motion>"];
    Bind[CanvasWidget,"<ButtonRelease-1>"];
    CanvasWidget[Delete] = {"infolabel","infobg"});
  InfoLabel[x__]:=StandardForm[$FORM="10.5";
    ToString[MapThread[InvCoord,{x}]]];
  InvCoord[x_,Linear,o_,s_]:=(x-o)/s;
  InvCoord[x_,Date,o_,s_]:=DateString[(x-o)/s];
  InvCoord[x_,Log,o_,s_]:=10^((x-o)/s);

  TagFrame[_]=0;
  DragDo[_]      := False;
  DragStart[_]   := Null;
  DragMove[_]    := Null;
  DragRelease[_] := Null;
  CanvasTagBind[tag_,start_,move_,release_]:=(
    With[{bindTag=If[Head[tag]<=>List, {tag}, tag]}, Scan[(
      DragDo[#]      = True;
      DragStart[#]   = start;
      DragMove[#]    = move;
      DragRelease[#] = release;)&, bindTag]];
    Bind[CanvasWidget,"<Button-1>",CanvasDrag[],Tags->tag,Add->True]);
  CanvasTagUnbind[tag_]:=(
    With[{bindTag=If[Head[tag]<=>List, {tag}, tag]}, Scan[
      Clear[DragDo[#], DragStart[#], DragMove[#], DragRelease[#]]&, bindTag]]);
  CanvasDragCall[Null]:=Null;
  CanvasDragCall[f_]:=Module[{fr,axes,scale,offset},
    If[(fr=TagFrame[DragTag])>0 && f[DragTag]<=>Null,
      {axes,scale,offset}=GraphicsList[[fr,1,2,{2,6,7}]];
      f[DragTag][DragTag,MapThread[InvCoord,{DragZ,axes,offset,scale}]]]];
  CanvasDrag[]:=(
    If[Not[DragDo[Tag/.$Event]], Return[]];
    {DragZ,DragTag}={{X,Y},Tag}/.$Event;
    DragZ0=DragZ;
    DeleteInfo[];
    Bind[CanvasWidget,"<Motion>",CanvasMove[]];
    Bind[CanvasWidget,"<ButtonRelease-1>",CanvasRelease[]];
    Bind[CanvasWidget,"<Escape>",CanvasCancel[]];
    CanvasWidget[Focus];
    CanvasDragCall[DragStart]);
  CanvasMove[]:=Module[{x={X,Y}/.$Event},
    CanvasWidget[Move]={DragTag,x-DragZ};
    DragZ=x;
    CanvasDragCall[DragMove]];
  CanvasRelease[]:=(
    Bind[CanvasWidget,"<Motion>"];
    Bind[CanvasWidget,"<ButtonRelease-1>"];
    Bind[CanvasWidget,"<Escape>"];
    CanvasDragCall[DragRelease]);
  CanvasCancel[]:=(
    CanvasWidget[Move]={DragTag,DragZ0-DragZ};
    CanvasRelease[]);

  (* CanvasFrame CallBack *)
  CanvasFrameRegisterCallBack[frid_Real, event_String, func_] := Module[{id},
    (* Initialize CallBack table *)
    If[Head[Canvas$FrameCallBack[frid, event]]===List,
      id=First[Complement[Range[Max[Canvas$FrameCallBack[frid, event]] + 1],
	Canvas$FrameCallBack[frid, event]]],
      id=1; Canvas$FrameCallBack[frid, event]={}];
    Canvas$FrameCallBack[frid, event, id]=func;
    AppendTo[Canvas$FrameCallBack[frid, event], id];
    Return[id]];

  CanvasFrameUnregisterCallBack[frid_Real, event_String, cbid_Real] :=
    If[Head[Canvas$FrameCallBack[frid, event]]===List
      && Select[Canvas$FrameCallBack[frid, event], (#===cbid)&]<=>{},
      Canvas$FrameCallBack[frid, event]=
	Complement[Canvas$FrameCallBack[frid, event], {cbid}];
      Canvas$FrameCallBack[frid, event, cbid]=.;
      If[Canvas$FrameCallBack[frid, event]==={},
	Canvas$FrameCallBack[frid, event]=.]];
  
  CanvasFrameClearCallBack[frid_Real, event_String] :=
    If[Head[Canvas$FrameCallBack[frid, event]]===List,
      Scan[(Canvas$FrameCallBack[frid, event, #]=.)&,
	Canvas$FrameCallBack[frid, event]];
      Canvas$FrameCallBack[frid, event]=.];

  CanvasFrameScanCallBack[frid_Real, event_String, func_] :=
    If[Head[Canvas$FrameCallBack[frid, event]]===List,
      Scan[func[Canvas$FrameCallBack[frid, event, #]]&,
	Canvas$FrameCallBack[frid, event]]];

  DefaultTickFont[x_,y_,fr_]:=
    TextFont[Round[FScale[TickFontScale,fr]*FontScale*Restrict[
      Switch[$FontSystem,"Xft",15,_,16]*x^y,7,32]],
      DefaultFont];

  MinorGrid[`X,m_,yl_,tag_]:=Scan[
    If[Canvas$PlotRange[[1,1]]<#<Canvas$PlotRange[[1,2]],
      CanvasDrawerLine[{Fill->"#606060",Stipple->"blvst1",Tag->tag},{1},
        Canvas$GCoord[{{#,#},yl}]]]&,m];

  MajorGrid[`X,m_,yl_,tag_]:=Scan[
    If[Canvas$PlotRange[[1,1]]<#<Canvas$PlotRange[[1,2]],
      CanvasDrawerLine[{Fill->"#a0a0a0",Stipple->"blvst",Tag->tag},{1},
        Canvas$GCoord[{{#,#},yl}]]]&,m];

  AxisGrid[`X,x_,yl_,tag_]:=If[Canvas$PlotRange[[1,1]]<x<Canvas$PlotRange[[1,2]],
    CanvasDrawerLine[{Fill->"#606060",Tag->tag},{1},
      Canvas$GCoord[{{x,x},yl}]]];

  MinorGrid[`Y,m_,xl_,tag_]:=Scan[
    If[Canvas$PlotRange[[2,1]]<#<Canvas$PlotRange[[2,2]],
      CanvasDrawerLine[{Fill->"#606060",Stipple->"blhst1",Tag->tag},{1},
        Canvas$GCoord[{xl,{#,#}}]]]&,m];

  MajorGrid[`Y,m_,xl_,tag_]:=Scan[
    If[Canvas$PlotRange[[2,1]]<#<Canvas$PlotRange[[2,2]],
      CanvasDrawerLine[{Fill->"#a0a0a0",Stipple->"blhst",Tag->tag},{1},
        Canvas$GCoord[{xl,{#,#}}]]]&,m];

  AxisGrid[`Y,y_,xl_,tag_]:=If[Canvas$PlotRange[[2,1]]<y<Canvas$PlotRange[[2,2]],
    CanvasDrawerLine[{Fill->"#606060",Tag->tag},{1},
      Canvas$GCoord[{xl,{y,y}}]]];

  DrawGrid[xy_,gr_,yl_,Mt_,mt_,tag_]:=Module[{{major,minor,axis}={True,True,True}},
    Scan[(
      If[MatchQ[#,All|Both|Minor],
        If[minor,
          minor=False;
          MinorGrid[xy,Join[Mt,mt],yl,tag]]];
      If[MatchQ[#,Automatic|All|Both|Major],
        If[major,
          major=False;
          MajorGrid[xy,Mt,yl,tag]]];
      If[MatchQ[#,Automatic|All|Axis],
        If[axis,
          axis=False;
          AxisGrid[xy,0,yl,tag]]];
      #/.Axis[x__]:>Scan[AxisGrid[xy,#,yl,tag]&,Flatten[{x}]])&,
      Flatten[{gr}]];
    BGItems=Join[BGItems,CanvasWidget[Find$WithTag[tag]]]];

  With[{
    TickFun[ft_,a_]:=Switch[ft,
      a,
      Null[],
      {Ticks,_Function|_List},
      ft[[-1]],
      _,
      Throw[]]},

    FrameX[ftb_,ftt_,ts_,gr_,ws_,tkf_,frt_,ful_,ftc_,tkc_]:=Module[
      {{tick,Mt,mt,logdt}=
        CanvasDrawerTicks[First[Canvas$PlotRange],ts/Abs[Second[Canvas$Scale]],
          StandardScale*ws,First[Canvas$Axes]],
        y,y1,tcs,yl,
        {ftag1,ftag2,grtag}={
          "F$X1"//Canvas$Frame,"F$X2"//Canvas$Frame,"G$X"//Canvas$Frame},
        {font1,font2}=Switch[tkf,
          _String,{tkf,tkf},
          _List,{FFont[tkf,1],FFont[tkf,3]},
          _,Default]/.
        Default->{
          DefaultTickFont[StandardScale*ws,0.5,1],
          DefaultTickFont[StandardScale*ws,0.5,3]}},
      If[tick<=>{},
        yl={y,y1}=Second[Canvas$PlotRange];
        DrawGrid[`X,gr,yl,Mt,mt,grtag];
        tcs=TickString[tick];
        tcs=Thread[Join[{{Canvas$PlotRange[[1,1]],0},tcs[[2]]},
          TickString[tick],
          {tcs[[-2]],{Canvas$PlotRange[[1,2]],0}}]];
        Switch[ftb,
          True|Ticks|False|Both|{Ticks,___},
          CanvasWidget[Create$Line]={Thread[Canvas$Coord1[tcs+{0,y}]],
            Width->frt,Fill->tkc[[1]],
            Tags->{ftag1,FrameTag}}];
        Switch[ftt,
          True|Ticks|Both|{Ticks,___},
          CanvasWidget[Create$Line]={
            Thread[Canvas$Coord1[tcs*{1,-1}+{0,y1}]],
            Width->frt,Fill->tkc[[2]],
            Tags->{ftag2,FrameTag}}];
        Catch[
          FrameTickX[TitlePosition["BOTTOM",""][[1,2]],"n",
            Mt,logdt,"L"//ftag1,font1,TickFun[ftb,True|Both],ful[[1]]]];
        Catch[
          FrameTickX[TitlePosition["TOP",""][[1,2]],"s",
            Mt,logdt,"L"//ftag2,font2,TickFun[ftt,Both],ful[[3]]]];
        ]];

    FrameY[ftl_,ftr_,ts_,gr_,ws_,tkf_,frt_,ful_,n_,ftc_,tkc_]:=Module[
      {tick,Mt,mt,logdt,pr,ax,
        x,x1,tcs,pw=0,ftrx,ftlx,i,apr,xl,
        {ftag1,ftag2,grtag}={
          "F$Y1"//Canvas$Frame,"F$Y2"//Canvas$Frame,"G$Y"//Canvas$Frame},
        {font1,font2}=Switch[tkf,
          _String,{tkf,tkf},
          _List,{FFont[tkf,2],FFont[tkf,4]},
          _,Default]/.Default->{
            DefaultTickFont[StandardScale*ws,0.35,2],
            DefaultTickFont[StandardScale*ws,0.35,4]}},
      {tick,Mt,mt,logdt}=CanvasDrawerTicks[
        pr=Second[Canvas$PlotRange],ts/Abs[First[Canvas$Scale]],
        StandardScale*ws*1.2,ax=Second[Canvas$Axes]];
      If[tick === {},
        Return[]];
      xl={x,x1}=First[Canvas$PlotRange];
      ftlx=MatchQ[ftl,True|Ticks|Both|{Ticks,___}];
      ftrx=MatchQ[ftr,True|Ticks|Both|{Ticks,___}];
      If[ftrx && ~ftlx,
        Do[
          If[TickListY[[i]]<=>{} && WindowList[[i]]===WindowList[[n]],
            pw=i;
            Break[]],
          {i,n-1}]];
!      Print[{"FrY: ",ftrx,ftlx,pw,n}];
      If[~pw,
        DrawGrid[`Y,gr,xl,Mt,mt,grtag];
        tcs=TickString[tick];
        tcs=Reverse[Thread[Join[{{pr[[1]],0},tcs[[2]]},
          TickString[tick],
          {tcs[[-2]],{pr[[2]],0}}]]];
        If[ftlx,
          CanvasWidget[Create$Line]={Thread[Canvas$Coord1[tcs+{x,0}]],
            Width->frt,Fill->tkc[[1]],
            Tags->{ftag1,FrameTag}};
          TickListY[[n]]={YOrg-(Canvas$Offset[[2]]+Mt*Canvas$Scale[[2]])/DPI}];
        If[ftrx,
          CanvasWidget[Create$Line]={
            Thread[Canvas$Coord1[tcs*{-1,1}+{x1,0}]],
            Width->frt,Fill->tkc[[2]],
            Tags->{ftag2,FrameTag}}],

        apr=AltPlotRange[pr,TickListY[[pw,1]],WindowList[[n,2]],ax];
!        Print["apr ",{pr,apr}];
        {tick,Mt,mt,logdt}=CanvasDrawerTicks[apr,
          ts/Abs[First[Canvas$Scale]],StandardScale*ws*1.2,ax];
        tcs=TickString[tick];
        tcs=Reverse[Thread[Join[{{apr[[1]],0},tcs[[2]]},
          TickString[tick],
          {tcs[[-2]],{apr[[2]],0}}]]];
        CanvasWidget[Create$Line]={
          Thread[Canvas$Coord1[tcs*{-1,1}+{x1,0}]],
          Width->frt,Fill->ftc,
          Tags->{ftag2,FrameTag}}
        ];
        Catch[
          FrameTickY[TitlePosition["LEFT CENTER",""][[1,1]],"e",
            Mt,logdt,"L"//ftag1,font1,TickFun[ftl,True|Both],ful[[2]]]];
        Catch[
          FrameTickY[TitlePosition["RIGHT CENTER",""][[1,1]],"w",
            Mt,logdt,"L"//ftag2,font2,TickFun[ftr,True|Both],ful[[4]]]];
      ];
    ];

  AltPlotRange[pr_,Mt_,w_,sc:(Linear|Log)]:=Module[{lM=Length[Mt],dy=pr[[2]]-pr[[1]],
    tr=w[[2]]-w[[1]],nt,dm,dyM,logdyM,fldyM,frdyM,dyf,dmc,yc,pr1,Mt1=Mt[[1]]},
    Switch[lM,
      0,
      Return[pr],
      1,
      dm=tr;
      dyf=dy,
      _,
      nt=tr/(dm=Mt[[2]]-Mt1);
      dyM=Switch[sc,
        Log,
        Max[1,dy/nt],
        _,
        dy/nt];
      logdyM=Log[10,dyM];
      fldyM=10^Floor[logdyM];
      frdyM=dyM/fldyM;
      dyf=fldyM*Which[
        frdyM<1e-2,
        1,
        1e-2<=frdyM<2.02,
        2,
        2.02<=frdyM<3.03,
        3,
        3.03<=frdyM<5.05,
        5,
        True,
        10]];
    yc=pr[[1]]+(dmc=Mt1-w[[1]])/tr*dy;
    yc=Floor[yc/dyf+dmc/dm]*dyf;
    Canvas$PlotRange[[2]]=pr1=yc+(w-Mt1)/dm*dyf;
    Canvas$Scale[[2]]=-DPI*tr/(pr1[[2]]-pr1[[1]]);
    Canvas$Offset[[2]]=DPI*(YOrg-Mt1)-yc*Canvas$Scale[[2]];
    SetupScaleFuns[];
    pr1];

  AltPlotRange[pr_,__]:=pr;    

  FtOption[x_Rule]:=x;
  FtOption[x_String]:=(Text->x);
  FtOption[x_,fm_:""]:=StandardForm[$FORM=fm;Module[{s=ToString[x]},
    Text->Which[
      s[1]===".",   "0"//s,
      s[1,2]==="-.","-0"//s[2,-1],
      True,s]]];

  UnitLabelX[""|" ",__]=Null;
  UnitLabelX[ful_,fltag_,font_,"n"]:=
    Module[{bb=CanvasWidget[BBox[fltag]],bbfly2=CanvasWidget[BBox["LF$Y2"//Canvas$Frame]],
      et="E"//fltag,dy},
      CanvasWidget[Create$Text] = {{bb[[3]],(bb[[2]]+bb[[4]])/2},
        Text->" "//ful,Anchor->"w",Tags->{et,FrameTag},Font->font};
      If[bbfly2<=>{},
        If[(dy=CanvasWidget[BBox[et]][[2]]-bbfly2[[4]])<=0,
          CanvasWidget[Move]={et,0,1-dy}]]];
  UnitLabelX[ful_,fltag_,font_,"s"]:=
    Module[{bb=CanvasWidget[BBox[fltag]],bbfly2=CanvasWidget[BBox["LF$Y2"//Canvas$Frame]],
      et="E"//fltag,dy},
      CanvasWidget[Create$Text] = {{bb[[3]],(bb[[2]]+bb[[4]])/2},
        Text->" "//ful,Anchor->"w",Tags->{et,FrameTag},Font->font};
      If[bbfly2<=>{},
        If[(dy=CanvasWidget[BBox[et]][[4]]-bbfly2[[2]])>=0,
          CanvasWidget[Move]={et,0,-1-dy}]]];
  UnitLabelY[""|" ",__]=Null;
  UnitLabelY[exps_,fltag_,font_,"e"]:=
    Module[{bb=CanvasWidget[BBox[fltag]],bbf=CanvasWidget[BBox[fltag[2,-1]]],
      et="E"//fltag},
      CanvasWidget[Create$Text] = {
        {bbf[[1]]-2,Max[bb[[2]],bbf[[2]]]-2},
        Text->exps,Font->font,Tags->{et,FrameTag},
        Anchor->"ne"};
      If[CanvasWidget[BBox[et]][[4]]>=bb[[2]],
        CanvasWidget[Move]={et,bb[[1]]-bbf[[1]],0}]
      ];
  UnitLabelY[exps_,fltag_,font_,"w"]:=
    Module[{bb=CanvasWidget[BBox[fltag]],bbf=CanvasWidget[BBox[fltag[2,-1]]],
      et="E"//fltag},
      CanvasWidget[Create$Text] = {
        {bbf[[3]]+2,Max[bb[[2]],bbf[[2]]]-2},
        Text->exps,Font->font,Tags->{et,FrameTag},
        Anchor->"nw"};
      If[CanvasWidget[BBox[et]][[4]]>=bb[[2]],
        CanvasWidget[Move]={et,bb[[3]]-bbf[[3]],0}]
      ];

  FrameTickX[yy_,anc_,Mt_,logdt_,fltag_,font_,fun_List,ful_]:=
    (Switch[First[Canvas$Axes],
      Linear|Date,
      (CanvasWidget[Create$Text] = {
        {Canvas$Coord1[{#,0}][[1]],yy},
        Null@@Override[Null@@(FtOption/@Flatten[{##2}]),
          If[WindowAspectRatio<XTRth,RotSym->270,Null[],Null[]],
          Anchor->anc,Tags->{fltag,FrameTag},
          Font->font]})&@@[fun,{1}],
      Log,
      (CanvasWidget[Create$Text] = {
        {Canvas$Coord1[{Log[#,10],0}][[1]],yy},
        Null@@Override[Null@@(FtOption/@Flatten[{##2}]),
          Anchor->anc,Tags->{fltag,FrameTag},
          Font->font]})&@@[fun,{1}]];
      UnitLabelX[ful,fltag,font,anc];
      AppendTo[TickLabels,fltag]);

  FrameTickY[x2_,anc_,Mt_,logdt_,fltag_,font_,fun_List,ful_]:=
    (Switch[Second[Canvas$Axes],
      Linear|Date,
      (CanvasWidget[Create$Text] = {
        {x2,Canvas$Coord1[{0,#}][[2]]},
        Null@@Override[Null@@(FtOption/@Flatten[{##2}]),
          Font->font,
          Tags->{fltag,FrameTag},
          Anchor->anc]})&@@[fun,{1}],
      Log,
      (CanvasWidget[Create$Text] = {
        {x2,Canvas$Coord1[{0,#}][[2]]},
        Null@@Override[Null@@(FtOption/@Flatten[{##2}]),
          Font->font,
          Tags->{fltag,FrameTag},
            Anchor->anc]})&@@[fun,{1}]];
      UnitLabelY[ful,fltag,font,anc];
      AppendTo[TickLabels,fltag]);

  FrameTickX[yy_,anc_,Mt_,logdt_,fltag_,font_,fun_:({}&),ful_]:=
    Module[{fm,zero,s0,logt,s,sout,{texp,exps,exp}=TickExp[Mt],
      etag="E"//fltag},
      Switch[First[Canvas$Axes],
          Linear,
          logt=Ceiling[Log[10,Max[Abs[First[Mt]],
            Abs[Mt[[Min[2,Length[Mt]]]]]]]+1e-10];
          fm=If[logdt<=texp,"S"//(Max[logt,1]-logdt+4)//"."//Max[-logdt+texp+1,0],""];
          zero=1E-3 * If[Length[Mt]>1,
	    Min[Abs[Difference[Mt]]],
	    Abs[Canvas$PlotRange[[2,2]] - Canvas$PlotRange[[2,1]]]];
          Scan[(
            s=FtOption[If[Abs[#]=<zero, 0, #/exp],fm][[2]];
            CanvasWidget[Create$Text] = {
              {Canvas$Coord1[{#,0}][[1]],yy},
              Null@@Override[Null@@fun[#,exp,s],
                If[WindowAspectRatio<XTRth,RotSym->270,Null[],Null[]],
                Anchor->anc,Text->s,Tags->{fltag,FrameTag},
                Font->font]})&,Mt];
          If[exp<>1,
            UnitLabelX[exps//ful,fltag,font,anc],
            UnitLabelX[ful,fltag,font,anc]],
          Log,
          Scan[(
            StandardForm[$FORM="";s="10`u"//#];
            CanvasWidget[Create$Text] = {
              {Canvas$Coord1[{#,0}][[1]],yy},
              Null@@Override[Null@@fun[#,1,s],
                Anchor->anc,Text->s,Tags->{fltag,FrameTag},
                Font->font]})&,Mt];
          UnitLabelX[ful,fltag,font,anc],
          Date,
          s0="";
          Scan[(s=DateString[#];
            sout=DateForm[s,s0];
            s0=s;
            CanvasWidget[Create$Text] = {
              {Canvas$Coord1[{#,0}][[1]],yy},
              Null@@Override[Null@@fun[#,1,sout],
                Anchor->anc,Text->sout,Tags->{fltag,FrameTag},
                Font->font]})&,Mt]];
      AppendTo[TickLabels,fltag]];
  
  FrameTickY[x2_,anc_,Mt_,logdt_,fltag_,font_,fun_:({}&),ful_]:=
    Module[{fm,zero,s0,logt,s,sout,{texp,exps,exp}=TickExp[Mt],n=0},
      exps=exps//ful;
      Switch[Second[Canvas$Axes],
        Linear,
        logt=Ceiling[Log[10,Max[Abs[First[Mt]],
          Abs[Mt[[Min[2,Length[Mt]]]]]]]+1e-10];
!        Print["FTY ",{logdt,texp}];
        fm=If[logdt<=texp,"S"//(Max[logt,1]-logdt+4)//"."//Max[-logdt+texp+1,0],""];
	zero=1e-3*If[Length[Mt]>1,
          Min[Abs[Difference[Mt]]],
          Abs[Canvas$PlotRange[[2,2]]-Canvas$PlotRange[[2,1]]]];
        Scan[(
          s=FtOption[If[Abs[#]=<zero, 0, #/exp],fm][[2]];
          CanvasWidget[Create$Text] = {
            {x2,Canvas$Coord1[{0,#}][[2]]},
            Null@@Override[Null@@fun[#,exp,s],
              Text->s,Font->font,
              Tags->{fltag,FrameTag},
              Anchor->anc]})&,Mt];
        UnitLabelY[exps,fltag,font,anc],
        Log,
        Scan[(
          s="10`u"//#;
          CanvasWidget[Create$Text] = {
            {x2,Canvas$Coord1[{0,#}][[2]]},
            Null@@Override[Null@@fun[#,1,s],
              Text->s,Font->font,
              Tags->{fltag,FrameTag},
              Anchor->anc]})&,Mt];
        UnitLabelY[ful//" ",fltag,font,anc],
        Date,
        s0="";
        Scan[(s=DateString[#];
          sout=DateForm[s,s0];
          s0=s;
          CanvasWidget[Create$Text] = {
            {x2,Canvas$Coord1[{0,#}][[2]]},
            Null@@Override[Null@@fun[#,1,sout],
              Anchor->anc,Text->sout,
              Tags->{fltag,FrameTag},
              Font->font]})&,Mt]];
      AppendTo[TickLabels,fltag]];

  TickExp[Mt_]:=Module[{x=Max[Abs[Mt]]},
    If[10^5>x>10^-3,{0,"",1},
      {x=Floor[Log[10,x]],If[x<>0,"x10`u"//x//"`n ","",""],10^x}]];

  DateForm[s_,s0_]:=SuppressZero[
    If[s[12,-1]==s0[12,-1]=="00:00:00",
      Which[s[7,10]==s0[7,10],
        s[1,5],
        True,
        s[1,10]],
      Module[{sa=s[12,13]//"`uh`n"//s[15,16]//"`um`n"//s[18,19]//"`us`n"},
        If[s[18,19]==s0[18,19]=="00",
          Which[
            s[1,13]==s0[1,13],
            sa[8,14],
            s[1,10]==s0[1,10],
            If[s[15,16]==s0[15,16]=="00",
              sa[1,7],
              sa[1,14]],
            s[7,10]==s0[7,10],
            " "//sa[1,14]//"\n"//s[1,5],
            True,
            "   "//sa[1,9]//"\n"//s[1,10]],
          Which[
            s[1,13]==s0[1,13],
            sa[8,-1],
            s[1,10]==s0[1,10],
            sa,
            s[7,10]==s0[7,10],
            sa//"\n "//s[1,5],
            True,
            "   "//sa//"\n"//s[1,10]]]]]];

  SuppressZero[s_]:=(SuppressZero[s]=If[s[1]=="0",s[2]//SuppressZero[s[3,-1]],
    Do[
      If[s[i]<>":" && (Order[s[i],"0"]>0 || Order["9",s[i]]>0),
        Return[s[1,i]//SuppressZero[s[i+1,-1]]]],
      {i,StringLength[s]}];
    s]);

  CanvasDrawerTicks[{t1_,t2_},ts_,w_,Linear]:=Module[
    {dt=t2-t1,dtf,dmt,tmt,r,ts1=ts*Abs[DPI/4],tsl1,tsl2,cmt},
    If[dt<=1e-100,{{},{},{},0},
      r=dt/(dtf=10^Floor[Log[10,dt]+1e-10]);
      {dtf,dmt}=dtf*AutoTick[w,r];
!      Print["CDT ",{dtf,dmt}];
      tmt=Range[Ceiling[t1/dtf]*dtf,t2,dtf];
      cmt=Complement[Range[Ceiling[t1/dmt]*dmt,t2,dmt],tmt];
      tsl1=ts1*Table[1,{Length[tmt]}];
      tsl2=ts1/3*Table[1,{Length[cmt]}];
      {Thread[{Join[tmt,cmt],Join[tsl1,tsl2]}],tmt,cmt,
        Floor[Log[10,dtf]+1e-10]}]];

  With[{lf=Append[Log[10,{1,2,3,4,5,6,7,8,9}],1],
    lf1=Log[10,{1,2,3,4,5,6,7,8,9}]},
    CanvasDrawerTicks[{t1_,t2_},ts_,w_,Log]:=Module[{dtf,
      tmt,logdt,dtf1,dtf2,i1,i2,m1,m2,j1,j2,j3,ts1=ts*Abs[DPI/4],
      tsl1,tsl2,cmt},
      If[t2-t1<=1e-40,{{},{},{},0},
        If[t2>t1+10,
          CanvasDrawerTicks[{t1,t2},ts,w,Linear],
          m1=t1-Floor[t1];
          i1=Position[lf,_?((#+1e-10>=m1)&),1,1][[1,1]];
          If[i1===1,
            j1=Floor[t1];dtf1={},
            j1=Ceiling[t1];dtf1=j1-1+Take[lf1,{i1,-1}]];
          m2=t2-Floor[t2];
          i2=Position[lf,x_?((#<=m2+1e-10)&),{1}][[-1,1]];
          If[i2==10,
            j2=Floor[t2];j3=j2+1;dtf2={},
            j3=Floor[t2];j2=j3-1;dtf2=j3+Take[lf1,{2,i2}]];
          dtf=If[j3>=j1,
            Join[dtf1,Flatten[Table[i+lf1,{i,j1,j2}]],dtf2],
            Intersection[dtf1,dtf2]];
          tmt=Range[j1,j3];
          cmt=DeleteCases[dtf,tmt,1];
          tsl1=ts1*Table[1,{Length[tmt]}];
          tsl2=ts1/3*Table[1,{Length[cmt]}];
          {Thread[{Join[tmt,cmt],Join[tsl1,tsl2]}],tmt,cmt,
            Floor[Log[10,t2-t1]+1e-10]}]]]];

  With[{tzo=(TimeZoneOffset-540)*60},
    CanvasDrawerTicks[{t1_,t2_},ts_,w_,Date]:=Module[
      {dt=t2-t1,dtf,dmt,tmt,r,ts1=ts*Abs[DPI/4],tsl1,tsl2,cmt,a},
      If[dt<=1e-40,{{},{},{},0},
        r=dt/(dtf=10^Floor[Log[10,dt]+1e-10]);
        {dtf,dmt}=dtf*AutoTick[w,r];
        Which[
          dtf<50,
          ,
          dtf<200000,
          {dtf,dmt}=Switch[dtf,
            50,{60,10},
            100,{120,30},
            200,{300,60},
            500,{600,120},
            1000,{1200,300},
            2000,{1800,600},
            5000,{3600,1200},
            10000,{10800,1800},
            20000,{21600,3600},
            50000,{43200,7200},
            100000,{86400,21600},
            _,{dtf,dmt}],
          dtf<86400*5 || dtf>10000*100000,
          Return[MapAt[#*86400-tzo&,
            CanvasDrawerTicks[({t1,t2}+tzo)/86400,ts,w,Linear],
            {{1,,1},{2}}]],
          True,
          {tmt,cmt}=DateTick[t1,t2,dtf];
          Goto["a"];
          ];
        tmt=Range[Ceiling[t1/dtf]*dtf,t2,dtf];
        cmt=Complement[Range[Ceiling[t1/dmt]*dmt,t2,dmt],tmt];
        Label["a"];
        tsl1=ts1*Table[1,{Length[tmt]}];
        tsl2=ts1/3*Table[1,{Length[cmt]}];
        {Thread[{Join[tmt,cmt],Join[tsl1,tsl2]}],tmt,cmt,
          Floor[Log[10,dtf]+1e-10]}]];

    DateTick[t1_,t2_,dtf_]:=Module[{da=AnchorDate[t1,t2],
      {dyf,dmf,ddf,dym,dmm,ddm}=Switch[Round[dtf/100000],
        5,{0,0,5,0,0,1},
        10,{0,0,10,0,0,2},
        20,{0,1,0,0,0,5},
        50,{0,2,0,0,0,10},
        100,{0,3,0,0,1,0},
        200,{0,6,0,0,1,0},
        500,{2,0,0,0,4,0},
        1000,{3,0,0,0,6,0},
        2000,{5,0,0,1,0,0},
        5000,{10,0,0,2,0,0},
        10000,{20,0,0,5,0,0}],
      d0,tm1,tm2,cm1,cm2,tick,tmt,cmt},
      d0=da;
      tm1=Table[d1=RoundDate[d0-{dyf,dmf,ddf,0,0,0},ddf];
        If[FromDate[d1]<t1,Break[]];
        d0=d1,{Infinity}];
      d0=da;
      tm2=Table[d1=RoundDate[d0+{dyf,dmf,ddf,0,0,0},ddf];
        If[FromDate[d1]>t2,Break[]];
        d0=d1,{Infinity}];
      tmt=Join[tm1,{da},tm2];
      d0=da;
      cm1=Table[d1=RoundDate[d0-{dym,dmm,ddm,0,0,0},ddm];
        If[FromDate[d1]<t1,Break[]];
        d0=d1,{Infinity}];
      d0=da;
      cm2=Table[d1=RoundDate[d0+{dym,dmm,ddm,0,0,0},ddm];
        If[FromDate[d1]>t2,Break[]];
        d0=d1,{Infinity}];
      tick=Join[cm1,{da},cm2];
      cmt=Complement[tick,tmt];
      {FromDate/@tmt,FromDate/@cmt}];

    RoundDate[d_,dd_:10]:=Module[{d1=ToDate[Round[(FromDate[d]+tzo)/86400]*86400-tzo],
      dt=If[dd,dd,10],rd},
      rd=Round[(d1[[3]]-1)/dt]*dt+1;
      If[rd>30 && dd>2,
        ToDate[FromDate[{d1[[1]],d1[[2]]+1,1,0,0,0}]],
        {d1[[1]],d1[[2]],rd,0,0,0}]];

    AnchorDate[t1_,t2_]:=Module[
      {d1=ToDate[Ceiling[(t1+tzo)/86400]*86400-tzo],
        d2=ToDate[Floor[(t2+tzo)/86400]*86400-tzo],d},
      d=d2-d1;
      Which[d[[1]],
        {d1[[1]]+1,1,1,0,0,0},
        d[[2]],
        {d1[[1]],d1[[2]]+1,1,0,0,0},
        d[[3]]>10,
        {d1[[1]],d1[[2]],Ceiling[(d1[[3]]-1)/10]*10+1,0,0,0},
        True,
        d1]]
    ];

  With[{
    l ={1/10,1/5, 1/4, 1/2, 1,  2,  4,5,10},
    l1={1/50,1/20,1/20,1/10,1/5,1/2,1,1,2}},
    AutoTick[w_,r_]:=Module[{m=2+4.631*w+4*Min[w,0.5],j},
      j=Length[l];
      Do[If[Floor[r/l[[k]]]<m,j=k;Break[]],{k,j}];
      {l[[j]],l1[[j]]}]];

  TickString[tick_]:=
    Append[Flatten[Thread[{#,
      ReplacePart[#,0,{,2}],
      ReplacePart[Rest[tick],0,{,2}]}],1],Last[tick]]&[Drop[tick,-1]];

  ClearCanvas[]:=(CanvasWidget[Delete]="all");

  SetupCM[]:=(
    If[CCM===Null,
      CCM=CanvasCM[This]]);

  With[{def={TextSize->1,TextRotate->0,TextAlign->"w",Tags->False,
    TextJustify->Null,
    TextPosition->"",TextFont->DefaultFont,TextCases->"",PlotColor->"Black",
    UseBG->False,Clip->False}},
    Primitive[Text[{"",__},___]]:=Null;
    Primitive[Text[body_,opt___]]:=Module[
      {z={TextCoord[body[[2,1]],1],TextCoord[body[[2,2]],2]},
        {size,al,pos,font,tag,tj,ca,pc,rot,ubg,clip,rota,anch,just}=
          {TextSize,TextAlign,TextPosition,TextFont,Tags,TextJustify,
            TextCases,PlotColor,TextRotate,UseBG,Clip,Rotation,Anchor,
            Justify}/.Override[opt,def]},
      If[~clip || (Canvas$Window[[1,1]]<=First[z]<=Canvas$Window[[1,2]]
        && Canvas$Window[[2,1]]<=Second[z]<=Canvas$Window[[2,2]]),
        ,
        Return[]];
!      CanvasWidget[Create$Text] = {WindowCoord[z],
      DrawText[First[body],WindowCoord[z],
        Fill->pc,
        Font->TextFont[Null@@font,Round[15*size*StandardScale]],
        rot=Mod[Switch[rota,
          _Real,rota,
          _,rot],360];
        If[rot,
          RotSym->rot,
          Null[],
          Null[]],
        UseBG->ubg,
        If[StringQ[tag],Tags->tag,Null[]],
        If[tj<=>Null,Justify->tj,Switch[just,_String,Justify->just,_,Null[]]],
        Anchor->Switch[anch,
          _String,anch,
          _,AnchorString[ToLowerCase[al]]]]
      ]];

  TextCoord[z_,1]:=
    (z/.
      {Scaled[x_]:>(x*First[Canvas$Scale]+First[Canvas$Offset])/DPI,
        WindowScaled[x_]:>((x-First[Canvas$Origin])*
          First[WindowSize]/RawWindowSize[[1]]+Canvas$Window[[1,1]]),
        CanvasScaled[x_]:>x/DPI,
        RectScaled[x_]:>x*(Canvas$RawWindow[[1,2]]-Canvas$RawWindow[[1,1]])
        +Canvas$RawWindow[[1,1]],
        LeftTags[x__,dx_]:>Module[{t=((#//Canvas$Frame)&/@{x}),bb},
          bb=Select[CanvasWidget[BBox[#]]&/@t,#<=>{}&];
          If[bb==={},
            dx,
            Min[bb[[,1]]]/DPI-dx]],
        RightTags[x__,dx_]:>Module[{t=((#//Canvas$Frame)&/@{x}),bb},
          bb=Select[CanvasWidget[BBox[#]]&/@t,#<=>{}&];
          If[bb==={},
            dx,
            Max[bb[[,3]]]/DPI+dx]]
        });

  TextCoord[z_,2]:=
    (z/.
      {Scaled[y_]:>(YOrg-(y*Second[Canvas$Scale]+Second[Canvas$Offset])/DPI),
        WindowScaled[y_]:>((y-Second[Canvas$Origin])*
          Second[WindowSize]/RawWindowSize[[2]]+Canvas$Window[[2,1]]),
        CanvasScaled[y_]:>(YOrg-y/DPI),
        RectScaled[y_]:>y*(Canvas$RawWindow[[2,2]]-Canvas$RawWindow[[2,1]])+
          Canvas$RawWindow[[2,1]], 
        AboveTags[y__,dy_]:>Module[{t=((#//Canvas$Frame)&/@{y}),bb},
          bb=Select[CanvasWidget[BBox[#]]&/@t,#<=>{}&];
          If[bb==={},
            dy,
            YOrg-Min[bb[[,2]]]/DPI+dy]],
        BelowTags[y__,dy_]:>Module[{t=((#//Canvas$Frame)&/@{y}),bb},
          bb=Select[CanvasWidget[BBox[#]]&/@t,#<=>{}&];
          If[bb==={},
            -dy,
            YOrg-Max[bb[[,4]]]/DPI-dy]]
        });

  AnchorString["left"]="w";
  AnchorString["right"]="e";
  AnchorString["center"]="c";
  AnchorString["top"]="n";
  AnchorString[x_]:=x;
  VerticalString[s_]:=Module[{tx=ToCharacterCode[s]},
    FromCharacterCode[Flatten[Thread[{tx,Table[10,{Length[tx]}]}]]]];

  With[{def={PointSize->1,PointSymbol->"1O",PointColor->"forest green",
    PlotColor->"black",PlotJoined->False,
    ErrorBarTickSize->1,ErrorBarThickness->1,ErrorBarColor->Default,
    PointTags->Null,PointBorderColor->Automatic,
    Legend->False,Thickness->0,Plot->True}},

    Primitive[Point[body_,opt___]]:=Module[
      {size,sym,pc,ptc,ebl,tag,pbc,leg,ebth,ebc,bt=Thread[body],
        op=Override[opt,def]},
      {size,sym,pc,ptc,ebl,tag,pbc,leg,ebth,ebc}=
        {PointSize,PointSymbol,PlotColor,PointColor,ErrorBarTickSize,PointTags,
          PointBorderColor,Legend,ErrorBarThickness,ErrorBarColor}/.op;
      ebc=ebc/.Default->pc;
      CanvasDrawerPoints[sym, tag, ptc, pc, size, pbc, bt];
      CanvasDrawerErrorBar[ebl * 0.1 * DPI, ebth, ebc, bt];
      If[leg<=>False,
        AppendLegend[{op,leg}]];
      ]];

  Primitive[Point[{},___]]:=Null;

  With[{def={PlotColor->"",FillColor->Null,MeshStyle->Null,Tags->False,
    BelowFrame->False}},
    RectOpt[opt___]:=(RectOpt[opt]=
      MapThread[If[StringQ[#],#2->#,Null[]]&,
        {{FillColor,MeshStyle,PlotColor,Tags}/.Override[opt,def],
          {Fill,Stipple,OutLine,Tag}}]);

    Primitive[Rectangle[min_,max_,opt:((_Rule|_RuleDelayed)...)]]:=(
      CanvasWidget[Create$Rectangle]={
        CoordLimited[min],
        CoordLimited[max],
        RectOpt[opt]};
      If[BelowFrame/.{opt}/.def,
        The$Canvas[Lower]={CanvasLastID,StartID}]
      )];

  With[{def={Position->Default}},
    Primitive[Rectangle[min0_,max0_,g__,opt:((_Rule|_RuleDelayed)..)]]:=
      (Show1$[False,RectPosition[min0,max0,Position/.{opt}/.def],g,opt];
        {Canvas$Axes,Canvas$PlotRegion,Canvas$PlotRange,Canvas$Window}=#;
        SetCanvas$Scale[Automatic])&[
          {Canvas$Axes,Canvas$PlotRegion,Canvas$PlotRange,Canvas$Window}]];

  Primitive[Rectangle[min_,max_,g__]]:=
    (Show1$[False,{min,max},g];
      {Canvas$Axes,Canvas$PlotRegion,Canvas$PlotRange,Canvas$Window}=#;
      SetCanvas$Scale[Automatic])&[
        {Canvas$Axes,Canvas$PlotRegion,Canvas$PlotRange,Canvas$Window}];

  RectPosition[min_,max_,Default|Null]:={min,max};
  RectPosition[min_,max_,Right[sep_:0]]:=With[{w=WindowRatio[Canvas$Window]},
    {{w[[1,2]]+sep,w[[2,1]]},{w[[1,2]]+sep+max[[1]]-min[[1]],w[[2,2]]}}];

  RectPosition[min_,max_,Left[sep_:0]]:=With[{w=WindowRatio[Canvas$Window]},
    {{min[[1]]-max[[1]]-sep+w[[1,1]],w[[2,1]]},{w[[1,1]]-sep,w[[2,2]]}}];

  RectPosition[min_,max_,Above[sep_:0]]:=With[{w=WindowRatio[Canvas$Window]},
    {{w[[1,1]],w[[2,2]]+sep},{w[[1,2]],w[[2,2]]+sep+max[[2]]-min[[2]]}}];

  RectPosition[min_,max_,Below[sep_:0]]:=With[{w=WindowRatio[Canvas$Window]},
    {{w[[1,1]],w[[2,1]]-sep+min[[2]]-max[[2]]},{w[[1,2]],w[[2,1]]-sep}}];

  With[{def={PlotColor->Null,FillColor->Null,MeshStyle->Null,Tags->False,
    Thickness->Null}},
    Primitive[Circle[p_,r_,
      opt:((_Rule|_RuleDelayed)...)]]:=
        (CanvasWidget[Create$Oval]={
          CoordLimited[p-r],
          CoordLimited[p+r],
          MapThread[If[Head[#]===#3,#2->#,Null[]]&,
            {{FillColor,MeshStyle,PlotColor,Tags,Thickness}/.Override[opt,def],
              {Fill,Stipple,OutLine,Tag,Width},
              {String,String,String,String,Real}}]})];

  With[{def={Plot->False, PointSize->1, PointSymbol->"1O",
    PointColor->"forest green", PointBorderColor->Automatic, PointTags->Null,
    PlotJoined->True, Thickness->1, Dashing->{1},
    PlotColor->"black", LineTags->Null,BelowFrame->False,
    FillColor->Null, Tags->False}},

    Primitive[Polygon[body_, opt:((_Rule|_RuleDelayed)...)]]:=Module[
      {pl, size, sym, ptc, pbc, ptag,
	pj, thick, dash, pc, ltag, fc, tag, cmd, bf},

      {pl, size, sym, ptc, pbc, ptag, pj, thick, dash, pc, ltag, fc, tag, bf}=
	{Plot, PointSize, PointSymbol, PointColor, PointBorderColor, PointTags,
	  PlotJoined, Thickness, Dashing, PlotColor, LineTags,
	  FillColor, Tags, BelowFrame}/.Override[{opt}/.{
	    Literal[The$Canvas]->The$Canvas,
	    Literal[Canvas$Frame]->Canvas$Frame}, def];

      dash=Switch[dash,
        1,{1},
        _Real,{dash,dash/3},
        _,dash];

      cmd={Fill->pc,
        If[ltag<=>Null,TagFrame[ltag]=Canvas$Frame;Tags->ltag,Null[]],
        If[thick<>1,Width->thick,Null[]]};

      (* Polygon *)
      If[StringQ[fc],
	CanvasWidget[Create$Polygon]={
	  Flatten[Map[CoordLimited[#]&, body]], Fill->fc,
	  If[StringQ[tag],
	    TagFrame[tag]=Canvas$Frame;Tags->tag, Null[]]};
        If[bf,
          The$Canvas[Lower]={CanvasLastID,StartID}]
        ];

      (* BorderLine *)
      If[pj===True,
	CanvasDrawerLine[cmd, dash, Thread[Append[body, First[body]]]]];

      (* Points *)
      If[pl===True,
	CanvasDrawerPoints[sym, ptag, ptc, pc, size, pbc, Thread[body]]];
      ]];

  With[{def={Command->Identity}},
    Primitive[Hook[opt:((_Rule|_RuleDelayed)...)]]:=Module[{},
      Command[Literal[CanvasDrawer]]/.Override[{opt}/.{
	    Literal[The$Canvas]->The$Canvas,
	    Literal[Canvas$Frame]->Canvas$Frame}, def];
      ]];

  RedrawGraphics[fr_,opt___]:=Module[
    {op={opt},pl=Position[AllGraphics,
      Rectangle[_,_,(_Graphics|_List)..,___]],
      rl0x=Extract[GraphicsList[[fr,1,2]],{{1,1},{2,1},{6,1},{7,1}}],
      rl0y=Extract[GraphicsList[[fr,1,2]],{{1,2},{2,2},{6,2},{7,2}}],
      k=1,gl,ex,ey,p,xscale,xrange,yscale,yrange,opk,a,aopt},
    If[fr==1,
      DefaultOption[[1]]=op;
      Show[
        Initialize->Frame,
        PlotRegion->Canvas$PlotRegion,
        Null@@(op/.Permanent[x_]->x),
        Graphics@@[GraphicsList[[1,,1]],{1}]]];
    {xscale,yscale}=Scale/.op;
    {xrange,yrange}=PlotRange/.op;
    p=MapAt[
      (++k;
        Which[
          k==fr,
          DefaultOption[[fr]]=op;
          {aopt,a}=SwitchCases[List@@#,{_Rule|_RuleDelayed,_}];
          Rectangle[Null@@a,Null@@Override[opt,Null@@aopt]],
          gl=GraphicsList[[k,1,2]];
          ex=NearlySameQ[Extract[gl,{{1,1},{2,1},{6,1},{7,1}}],rl0x,
            Threshold->1e-4,AbsoluteThreashold->1e-6*Max[Abs[rl0x]]];
          ey=NearlySameQ[Extract[gl,{{1,2},{2,2},{6,2},{7,2}}],rl0y,
            Threshold->1e-4,AbsoluteThreashold->1e-6*Max[Abs[rl0x]]];
!          Print[{"RDrG: ",k,fr,rl0x,Extract[gl,{{1,1},{2,1},{6,1},{7,1}}],ex}];
          ex (* ||ey *),
          DefaultOption[[k]]=(
            opk={
              Scale->{
                If[ex,xscale,gl[[2,1]]],
                If[ey,yscale,gl[[2,2]]]},
              (PlotRange->{
                If[ex,xrange,
                  Switch[gl[[2,1]],
                    Log,
                    10^gl[[1,1]],
                    _,
                    gl[[1,1]]]],
                If[ey,yrange,
                  Switch[gl[[2,2]],
                    Log,
                    10^gl[[1,2]],
                    _,
                    gl[[1,2]]]]})});
          {aopt,a}=SwitchCases[List@@#,{_Rule|_RuleDelayed,_}];
          Rectangle[Null@@a,Null@@Override[Redraw->FromDate[],Null@@opk,Null@@aopt]],
          True,
          #])&,AllGraphics,pl];
    Show[
      PlotRegion->Canvas$PlotRegion,
      Initialize->Frame,p]];

  DashCanonical[x:{_}]:=(DashCanonical[x]=x);
  DashCanonical[dash_List]:=Module[{d2=Partition[dash,2][[,1]],m,p,d,s=Plus@@dash,ll=40/DPI,s0,d0},
    m=Max[d2];
    p=(Position[d2,m,1,1][[1,1]])*2-1;
    d=RotateLeft[dash,p-1];
    If[d[[1]]>0.1,
      d0=d;
      s0=s-d[[1]]+0.1;
      While[s0<ll,
        d=Join[d,d0];
        s0=s0+s];
      d[[1]]=0.1];
    DashCanonical[dash]=d];

  With[{txdef={PlotColor->"black",TextFont->DefaultFont,TextSize->1}},
    Canvas$Legend[n_, r_] := Module[
      {pc,pl,size,sym,ptc,dash,thick,pj,pbc,pbc1,leg,cmd,x0,dx,dy,y,bar,
        d1=5,d2=-1,d3=1,legtag,legtagfr,bdf,begin=CanvasLastID,
        x1,x2,y1,y2,ls="legend"//n,lsfr,w,h,rb,tx,txfont,txsize,txcol,zr,legr,p,
        l=LegendList[[n]],wy=(-Subtract@@WindowList[[n,2]])*DPI},
      lsfr=ls//"fr";
      legr={ls,r};
      {w,h} = WidgetInfo[CanvasWidget,{Width,Height}];
      If [{w,h}==={1,1}, {w,h} = CanvasWidget[CGet[Width,Height]]];
      legtag = (Tags->ls);
      legtagfr=(Tags->{ls,lsfr});
      {x0,y} = {r[[2,1]]-200,r[[1,2]] + 30 + d3 +1};
      dx = 40;
      d2=Round[Min[d2,wy/20]];
      Scan[(
        {pc,pl,size,sym,ptc,dash,thick,pj,pbc,leg}=
          {PlotColor,Plot,PointSize,PointSymbol,
            PointColor,Dashing,Thickness,PlotJoined,
            PointBorderColor,Legend}/.First[#];
        sym=sym/.{"BA"->"BX"};
        bar=(sym===Bar);
        dash=If[bar,
          1,
          DashCanonical[Switch[dash,
            1,{1},
            _Real,{dash,dash/3},
            _,dash]]];
        cmd={Fill->If[bar,ptc,pc],legtag,If[thick<>0,Width->thick,Null[]]};
        If[pj<=>False,
          bdf=CanvasClipLine[{{x0,x0+dx},{y,y}},{{0,0},{w,h}},{1}];
          If[dash==={1},
            CanvasWidget[Create$Line]={bdf,cmd},
            CanvasWidget[Create$Line]={bdf,Dash->TclArg[Round[dash*DPI]],cmd}]
          ];
        If[bar,
          bdf=CanvasClipLine[{{x0,x0+dx},{y,y}},{{0,0},{w,h}},{1}];
          CanvasWidget[Create$Line]={bdf,cmd,Width->size},
          If[pl,
            pbc1=If[Not[StringQ[pbc]],ptc,pbc];
            size*=PlotSymbolSize;
            Canvas$Symbol[ls,{x0+dx/2,y},sym,size,ptc,pbc1];
            ]];
        tx=Second[#];
        Switch[tx,
          _String,
          DrawText[tx,{x0+dx+d1,y},
            Anchor->"w",
            Font->TextFont[DefaultFont,
              Round[LegendFontScale*Min[15*StandardScale,(wy-d2*2-3)/(Length[l]+1)/1.7]]],
              legtag],
          _List,
          {txfont,txsize,txcol}={TextFont,TextSize,PlotColor}/.Rest[tx]/.txdef;
          DrawText[First[tx],{x0+dx+d1,y},
            Anchor->"w",Fill->txcol,
            Font->TextFont[Null@@txfont,DefaultFont,Round[15*txsize*StandardScale*LegendFontScale]],
            legtag]
          ];
        y += (CanvasWidget[BBox[ls]][[4]] - y)*2;
        )&,l];
      zr = CanvasWidget[BBox[ls]];
      If[({dx,dy}={r[[2,1]]-30-zr[[3]],0}+LegendOffset[ls])<=>{0,0},
        CanvasWidget[Move] = {ls, {dx,dy}};
        zr+={dx,dy,dx,dy}];
      {x1,y1,x2,y2}=zr;
      CanvasWidget[Create$Rectangle]={x1-d1,y1-d3,x2+d1,y2+d2,legtagfr,
        Outline->"gray40",If[LegendBG<=>Null,
!          If[ListQ[LegendBG],Fill->LegendBG[[1]],Alpha->LegendBG[[2]],
            Fill->LegendBG,Null[],Null[]]};
      CanvasWidget[Create$Line]={x1-d1+1,y2+d2+1,x2+d1+1,y2+d2+1,x2+d1+1,y1-d3+1,
        Fill->"gray60",legtagfr};
!      Print["Legend: ",{FirstBG,begin}];
      If[FirstBG<=>"",begin=FirstBG];
!      With[{lsfr,begin},
!        After[0,CanvasWidget[Raise]={lsfr,begin}]];
      CanvasWidget[Raise]={lsfr,begin};
      If[(p=Position[Legends,legr,1,1])<=>{},
        Legends[[p[[1,1]]]]=legr,
        AppendTo[Legends,legr]];
      With[{ls},
        Bind[CanvasWidget,"<ButtonPress>",
          LegendStartMove[ls],legtag];
        Bind[CanvasWidget,"<ButtonRelease>",
          LegendStopMove[],legtag];
        ];
      ];
    ];
  LegendStartMove[t$_] := (
    CanvasWidget[Grab$Set];
    LegendPos = {X,Y}/.$Event;
    Bind[CanvasWidget,"<Motion>",LegendMove[t$]];
    );
  LegendStopMove[] := (
    Bind[CanvasWidget,"<Motion>",];
    CanvasWidget[Grab$Release];
    );
  LegendMove[t$_] := Module[{
    p = {X,Y}/.$Event,dp},
    LegendOffset[t$]+=(dp=p-LegendPos);
    CanvasWidget[Move] = {t$,dp};
    LegendPos = p;
    ];

  AdjustLegend1[ls_,r_,r1_,ida_,d0_:0]:=Module[{
    id=Join[BGItems,ida],
    novmin=Infinity,zrmin,zr=CanvasWidget[BBox[ls]]+{d0,d0,-d0,-d0},ov,nov,d=10,dx,dy},
    If[zr[[1]]>=zr[[3]] || zr[[2]]>=zr[[4]],
      Return[INF]];
    If[r<=>r1,
      zrmin=zr;
      While[ov=Complement[CanvasWidget[Find$Overlapping[zr]],id];
        nov=Length[ov];
        nov>0,
        If[nov<novmin,
          novmin=nov;
          zrmin=zr];
        If[zr[[4]]<r[[2,2]]-30,
          CanvasWidget[Move] = {ls, {0,d}};
          zr+={0,d,0,d},
          If[zr[[1]]>r[[1,1]]+30,
            {dx,dy}={-d,r[[1,2]]+10-zr[[2]]};
            zr+={dx,dy,dx,dy};
            CanvasWidget[Move] = {ls, {dx,dy}},
            CanvasWidget[Move] = {ls, (zrmin-zr)[[{1,2}]]};
            zr=zrmin;
            Break[]]]],

      CanvasWidget[Move]={ls,{r[[1,1]]+30-zr[[1]],0}};
      zrmin=zr=CanvasWidget[BBox[ls]];
      While[ov=Complement[CanvasWidget[Find$Overlapping[zr]],id];
        nov=Length[ov];
        nov>0,
        If[nov<novmin,
          novmin=nov;
          zrmin=zr];
        If[zr[[4]]<r[[2,2]]-30,
          CanvasWidget[Move] = {ls, {0,d}};
          zr+={0,d,0,d},
          If[zr[[3]]<r[[2,1]]-30,
            {dx,dy}={d,r[[1,2]]+10-zr[[2]]};
            zr+={dx,dy,dx,dy};
            CanvasWidget[Move] = {ls, {dx,dy}},
            CanvasWidget[Move] = {ls, (zrmin-zr)[[{1,2}]]};
            zr=zrmin;
            Break[]]]]];
    novmin
    ];

  AdjustLegend2[ls_,r_,r1_,ida_]:=Module[{res,d=-5},
    While[
      (res=AdjustLegend1[ls,r,r1,ida,d])<=>INF,
      d+=5];
    res];

  AdjustLegend[]:=Module[{rl=Reverse[Legends],ida={},l,r,r1},
    If[rl<=>{},
      {l,r}=Thread[rl];
      r1=Drop[Prepend[r,Null],-1];
      AdjustLegend2@@[
        Thread[{l,r,r1,
          (ida=Join[ida,CanvasWidget[Find$WithTag[#[[1]]]]])&/@rl}],{1}]
      ]];

  Canvas$FrameClick[fr_, opt___] := Module[
    {d=4,sc,vperm,gr,xyr,r,ax1,ax2,ay1,ay2,gl},
    gl=GraphicsList[[fr,1,2]];
    bb=Flatten[gl[[1]]*gl[[6]]+gl[[7]]];
    ax1 = bb[[1]]+2;
    ax2 = bb[[2]]-2;
    ay1 = bb[[4]]+2;
    ay2 = bb[[3]]-2;
    CanvasWidget[Create$Line]={ax1-d,ay1-d,ax2+d,ay1-d,
      ax2+d,ay2+d,ax1-d,ay2+d,ax1-d,ay1-d,
      Fill->"red",
      Tags->"axind",Stipple->"gray50"};
    CanvasWidget[Create$Line]={ax1+d,ay1+d,ax2-d,ay1+d,
      ax2-d,ay2-d,ax1+d,ay2-d,ax1+d,ay1+d,
      Fill->"red",
      Tags->"axind",Stipple->"gray50"};
    If[~ChooseAxis@Mapped,
      ChooseAxis@CAWindow=ChooseAxis[]];
    r=ChooseAxis@CAWindow@Choose[gl];
    If[r<=>Null,
      StandardForm[
        {sc,vperm,gr,xyr}=r;
	CanvasFrameScanCallBack[fr, "AxisNotify", #[{sc,vperm,gr,xyr}]&];
        Canvas$Widget=CanvasWidget;
        RedrawGraphics[fr,
          Scale->{SetPermanent[sc[[1]],vperm[[1,3]]],
            SetPermanent[sc[[2]],vperm[[2,3]]]},
          GridLines->{SetPermanent[gr[[1]],vperm[[1,4]]],
            SetPermanent[gr[[2]],vperm[[2,4]]]},
          r = Map[If[Head[#]===List,FromDate[#],#]&,xyr,{2}];
	  Do[If[vperm[[i,j]],r=MapAt[Permanent,r,{i,j}]],{i,2},{j,2}];
          PlotRange->r];
        ]];
    CanvasWidget[Delete] = "axind"];

  SetPermanent[s$_,True] := ToExpression["Permanent["//s$//"]"];
  SetPermanent[s$_,_] := s$;

  ];

CanvasGraphics@CanvasObject[_]=Null;
The$Canvas=Null;
(Canvas$Widget=Widget[c_,_Canvas])^:=(
  $DisplayFunction=CanvasDrawer;
  If[CanvasGraphics@CanvasObject[c]===Null,
    CanvasGraphics@CanvasObject[c]=CanvasGraphics[c];
    The$CanvasObject=CanvasGraphics@CanvasObject[c];
    CanvasGraphics@CanvasObject[c]@Choose[];
    CanvasGraphics@CanvasObject[c]@SetCanvas$Scale[Automatic],
    With[{CanvasGraphics@CanvasObject[c]},
      The$CanvasObject:=CanvasGraphics@CanvasObject[c];
      CanvasGraphics@CanvasObject[c]@Choose[]]]);
SetAttributes[The$CanvasObject,Dynamic];
CanvasDrawer[x__]:=The$CanvasObject@CanvasDrawer[x];
(Canvas$Offset=x_)^:=The$CanvasObject@Set$Canvas$Offset[x];
Canvas$Offset:=The$CanvasObject@Set$Canvas$Offset[];
(Canvas$Scale=x_)^:=The$CanvasObject@Set$Canvas$Scale[x];
Canvas$Scale:=The$CanvasObject@Set$Canvas$Scale[];

The$CanvasObject:=StandardForm[
  Clear[The$CanvasObject];
  If[~RealQ[Default$CanvasWidth],Default$CanvasWidth=1024];
  If[~RealQ[Default$CanvasHeight],Default$CanvasHeight=768/1024*Default$CanvasWidth];
  If[~StringQ[Default$CanvasBG],Default$CanvasBG="white"];
  If[The$Canvas===Null,
    If[StringQ[KBF$AppName],
      Canvas$Window=KBSubFrame["Canvas_"//GetPID[],DefauleCanvas$Frame],
      Canvas$Window=KBMainFrame["Canvas_"//GetPID[],DefaultCanvas$Frame]];
    Canvas$Canvas=Canvas[DefaultCanvas$Frame,
      Width->Min[Default$CanvasWidth,WidgetInformation[DefaultCanvas$Frame,ScreenWidth]*0.9],
      Height->Min[Default$CanvasHeight,WidgetInformation[DefaultCanvas$Frame,ScreenHeight]-80],
      BG->Default$CanvasBG];
    Canvas$Widget=Canvas$Canvas,
    Canvas$Widget=The$Canvas];
  The$CanvasObject];
If[RealQ[Default$CanvasFontScale],
  The$CanvasObject@FontScale=Default$CanvasFontScale];
If[RealQ[Default$CanvasTickFontScale],
  The$CanvasObject@TickFontScale=Default$CanvasTickFontScale];

Canvas::busy="Canvas `1` is busy";
