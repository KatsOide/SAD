#!/bin/sh

JOB_DIR=$(pwd)
SAD_ROOTPATH="$(cd "$(dirname "$0")";cd ..; pwd)"
#echo $SAD_ROOTPATH
export SAD_ROOTPATH
cd $JOB_DIR

SAD_PACKAGES="$SAD_ROOTPATH/Packages"; export SAD_PACKAGES
SAD_ARCH=`$SAD_ROOTPATH/bin/HostArch`
SAD_EXE="$SAD_ROOTPATH/obj/${SAD_ARCH}/sad1.exe";export SAD_EXE

# Set stack limit
stacksize=8192		# Kbytes

usage () {
    basename0="`basename $0`"

    blankname=""
    bname="${basename0}"
    while [ -n "${bname}" ]; do
	bname="${bname#?}"
	blankname="${blankname} "
    done

    echo "usage: ${basename0} [-gsl|--debug-wait] [-env environment] [command or filename]"
    exit 1
}

# Check driver script name
case "${0##*/}" in
    gsl)
	mode=debug-wait
	;;
    *)
	mode=normal
	;;
esac

# Check options
while [ $# -gt 0 ]; do
    case "$1" in
	-env)
	    [ $# -lt 2 ] && usage
	    shift
	    SAD_ENV="$1"
	    export SAD_ENV
	    ;;

	-gsl|--debug-wait)
	    mode=debug-wait
	    ;;

	--)
	    shift
	    break
	    ;;

	-*)
	    usage
	    ;;

	*)
	    break
	    ;;
    esac
    shift
done

case ${SAD_ARCH} in
*-CYGWIN*)
    ;;
*-Darwin)
    # MacOS X's /bin/sh is zsh in version 10.1 and bash in version 10.2
    # We check ZSH/BASH_VERSION shell variable
    if [ x"${ZSH_VERSION}" != x ]; then
	limit stacksize ${stacksize}	# May be /bin/sh = zsh (MacOS X 10.1)
    elif [ x"${BASH_VERSION}" != x ]; then
	ulimit -s ${stacksize}		# May be /bin/sh = bash(MacOS X 10.2)
    else
	ulimit -s ${stacksize}		# Otherwise Boune shell or ash
    fi
    ;;
*)		# /bin/sh is Boune shell or ash
    ulimit -s ${stacksize}
    ;;
esac

# Set library path for dynamic link library
case ${SAD_ARCH} in
*-CYGWIN*)
#    PATH=/Users/oide/SAD/oldsad/arch/${SAD_ARCH}/bin:${PATH}
    PATH=$SAD_ROOTPATH/obj/${SAD_ARCH}/bin:${PATH}
    ;;
*-Darwin)
#    DYLD_LIBRARY_PATH=/Users/oide/SAD/oldsad/arch/${SAD_ARCH}/lib ; export DYLD_LIBRARY_PATH
    DYLD_LIBRARY_PATH=$SAD_ROOTPATH/obj/${SAD_ARCH}/lib ; export DYLD_LIBRARY_PATH
    ;;
*)
    ;;
esac

input_script=
if [ $# -ge 1 ]; then
    if [ -r $1 ]; then
	input_script="$1"
	shift
    fi
fi

if [ -n "${SAD_GS_LOGDIR}" -a \
    -d "${SAD_GS_LOGDIR}" -a -w "${SAD_GS_LOGDIR}" ]; then
    if [ x"${input_script}" != x ]; then
	cmd_argv="-c ${input_script} $@"
    else
	cmd_argv="$@"
    fi
    printf '**********\n\nHost Name:\t%s\nDate/Time:\t%s\n\nDirectory:\t%s\nGS Mode:\t%s\nGS PID:\t\t%s\nDisplay:\t%s\nArgument:\t%s\n\n' \
	"`hostname`" \
	"`date '+%Y-%m-%d %H:%M:%S %z'`" \
	"`pwd`" \
	"${mode}" \
	"$$" \
	"${DISPLAY}" \
	"${cmd_argv}" \
	>> "${SAD_GS_LOGDIR}/gs.command.log"
fi

case ${mode} in
    debug-wait)
	if [ x"${input_script}" != x ]; then
	    ${SAD_EXE} -c "${input_script}" "$@"
	    status=$?
	else
	    ${SAD_EXE} "$@"
	    status=$?
	fi
	echo ' '
	echo '***  SAD script is terminated.  ***'
	echo '***  Please hit return to close this terminal.  ***'
	read line
	exit ${status}
	;;
    *)
	if [ x"${input_script}" != x ]; then
	    exec ${SAD_EXE} -c "${input_script}" "$@"
	else
	    exec ${SAD_EXE} "$@"
	fi
	;;
esac

# End of File
